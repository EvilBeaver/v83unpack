
Перем WshShell Экспорт;
Перем ФайлПрограммыРаспаковки; //в качестве програмы распаковки используется программа V8Unpack 2.0 от disa_da из публикации http://infostart.ru/public/15695/
Перем ФайлDLL;                 // zlib1.dll - нужен для работы программы распаковки

Функция ПолучитьИмяФайлаЛога()
	
	ГСЧ = Новый ГенераторСлучайныхЧисел(ТекущаяДата()-Дата('00010101'));
		
	Возврат КаталогВременныхФайлов()+"app_"+Формат(ТекущаяДата(),"ДФ=yyyy-MM-dd-mm-ss")+Строка(ГСЧ.СлучайноеЧисло(0, 1000))+".log";;
	
КонецФункции


Функция ПолучитьТекст(ЧтениеXML)
	Результат = "";
	Пока ЧтениеXML.Прочитать()	Цикл
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			Результат = ЧтениеXML.Значение;
		КонецЕсли;
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;  
	
	Возврат Результат;
	
КонецФункции

Процедура Инициализация()
	ДвоичныеДанныеПрограммыРаспаковки = ЭтотОбъект.ПолучитьМакет("UnpackV8");
	ДвоичныеДанныеDLL=ЭтотОбъект.ПолучитьМакет("zlib1");
	ДвоичныеДанныеПрограммыРаспаковки.Записать(КаталогВременныхФайлов()+"UnpackV8.exe");
	ДвоичныеДанныеDLL.Записать(КаталогВременныхФайлов()+"zlib1.dll");
	ФайлПрограммыРаспаковки = Новый Файл(КаталогВременныхФайлов()+"UnpackV8.exe");
	ФайлDLL=Новый Файл(КаталогВременныхФайлов()+"zlib1.dll");
КонецПроцедуры

Процедура Распаковка(ФайлРаспаковки,КаталогРаспаковки)
	ФайлДляРаспаковки=Новый файл(ФайлРаспаковки);
	Если КаталогРаспаковки="" тогда
		ИнтересующийКаталог=Новый файл(КаталогВременныхФайлов()+ФайлДляРаспаковки.Имя+".und");
		Если  ИнтересующийКаталог.Существует() тогда
			ГСЧ = Новый ГенераторСлучайныхЧисел(ТекущаяДата()-Дата('00010101'));
			КаталогРаспаковки=КаталогВременныхФайлов()+ФайлДляРаспаковки.Имя+Строка(ГСЧ.СлучайноеЧисло(0, 1000)) +".und";
		Иначе
			КаталогРаспаковки=КаталогВременныхФайлов()+ФайлДляРаспаковки.Имя+".und";
		КонецЕсли;
	ИначеЕсли	НайтиФайлы(КаталогРаспаковки,"*.*").Количество()>0 тогда
		//Предупреждение("Указанный каталог не пустой. В каталоге будет создан подкаталог"+Символы.ПС+КаталогРаспаковки+"\"+ФайлДляРаспаковки.Имя+".und");
		//КаталогРаспаковки=КаталогРаспаковки+"\"+ФайлДляРаспаковки.Имя+".und";
	КонецЕсли;
	
	Если ФайлПрограммыРаспаковки=Неопределено тогда
		Инициализация();
	КонецЕсли;
	
	// распакуем файл
	//Состояние("Чтение файла...");
	СтрокаЗапуска = """"+ФайлПрограммыРаспаковки.ПолноеИмя+""" -parse """+ФайлДляРаспаковки.ПолноеИмя+""" """+КаталогРаспаковки+"""";
	WshShell.Run(СтрокаЗапуска, 0, Истина);
КонецПроцедуры



Процедура ПрочитатьФайлВерсий() Экспорт
	Если НЕ ЗначениеЗаполнено(ПутьКФайлуВерсий) Тогда
		Возврат;
	КонецЕсли;
	
	История.Очистить();
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ПутьКФайлуВерсий);
	
	Пока ЧтениеXML.Прочитать() Цикл 
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента 
			И ЧтениеXML.Имя = "Record" Тогда
			
			НоваяСтрока = История.Добавить();
			Пока ЧтениеXML.Прочитать() Цикл
				Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
					Если ЧтениеXML.Имя="VERNUM" Тогда
						НоваяСтрока.НомерВерсии = Число(ПолучитьТекст(ЧтениеXML));
					КонецЕсли;
					Если ЧтениеXML.Имя="USERID" Тогда
						НоваяСтрока.Автор = ПолучитьТекст(ЧтениеXML);
					КонецЕсли;
					Если ЧтениеXML.Имя="CODE" Тогда
						НоваяСтрока.Тэг = ПолучитьТекст(ЧтениеXML);
					КонецЕсли;
					Если ЧтениеXML.Имя="VERDATE" Тогда
						Дата = ПолучитьТекст(ЧтениеXML);
						Дата = СтрЗаменить(СтрЗаменить(Дата, "-", ""), ":", "");
						Дата = СтрЗаменить(Дата, "T", "");
						Дата = Дата(Дата);
						НоваяСтрока.Дата = Дата;
					КонецЕсли;
					
					Если ЧтениеXML.Имя="COMMENT"  Тогда
						НоваяСтрока.Комментарий = ПолучитьТекст(ЧтениеXML);
					КонецЕсли;
					
					Если Ложь 
						ИЛИ 
						( Ложь
							ИЛИ ЧтениеXML.Имя = "SNAPSHOTMAKER"  
							ИЛИ ЧтениеXML.Имя = "SNAPSHOTCRC"
							ИЛИ ЧтениеXML.Имя = "PVERSION"
							ИЛИ ЧтениеXML.Имя = "CVERSION"
 
						)	Тогда
						Текст = ПолучитьТекст(ЧтениеXML);
					КонецЕсли;
					
					
					
				КонецЕсли;
				
				Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = "Record" Тогда
					Прервать;	
				КонецЕсли;
			
			КонецЦикла;	
				
		КонецЕсли;
	
	//	Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда 
	//		
	//		Сообщить(НСтр("ru = '"+ЧтениеXML.Имя+" {'"), СтатусСообщения.Информация);
	//
	//		Пока ЧтениеXML.ПрочитатьАтрибут() Цикл 
	//
	//			// Прочитать данные узла атрибута. 
	//			ТипУзла		= ЧтениеXML.ТипУзла;
	//			Имя			= ЧтениеXML.Имя;
	//			Значение	= ЧтениеXML.Значение;
	//			
	//			Сообщить(НСтр("ru = '   Атрибут: "+Имя+": "+Значение+"'"), СтатусСообщения.Информация);
	// 
	//		КонецЦикла;
	//
	//	ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда 
	//
	//		Сообщить(НСтр("ru = '   Текст: "+ЧтениеXML.Значение+"'"), СтатусСообщения.Информация);
	//
	//	ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда 
	//
	//		Сообщить(НСтр("ru = ' }'"), СтатусСообщения.Информация);
	//
	//	КонецЕсли; 
	
	КонецЦикла;
	
	
	
КонецПроцедуры

Функция СохранитьКонфигурацию(СтруктураПараметров) Экспорт
	
	Перем ИмяФайлаВыгрузкиКаталог, ПутьКБазе;
	
	БылаОшибка = Ложь;
	
	#Если НЕ Клиент И НЕ Сервер Тогда
	Если Ложь Тогда
		СтруктураПараметров = Справочники.Конфигурации.СоздатьЭлемент();
	КонецЕсли;
	#КонецЕсли
	
	Если ТипЗнч(СтруктураПараметров) <> Тип("Структура") Тогда
		//ОперацииНадХранилищем.Сообщение("Неперавильный параметр");
		Сообщить("Неперавильный параметр");
		Возврат Истина;
	КонецЕсли;
	
	//Если СтруктураПараметров.Ссылка.ЭтоГруппа Тогда
	//	Сообщение("Это группа","");
	//	Возврат Истина;
	//КонецЕсли;
	
	// СтруктураПараметров.ПоследняяВерсияХранилища=СтруктураПараметров.ПоследняяВерсияХранилища+1;
		
	ИмяФайлаВыгрузкиКаталог = СтруктураПараметров.ПутьКДанным;
	//Если Константы.АрхивыВОтдельныхКаталогах.Получить() Тогда
	//	ИмяФайлаВыгрузкиКаталог = ИмяФайлаВыгрузкиКаталог + "\" + СтруктураПараметров.ПодкаталогАрхивовИОбновлений;
	//	СоздатьКаталог(ИмяФайлаВыгрузкиКаталог);
	//КонецЕсли;
	ИмяФайлаКонфигурации = ИмяФайлаВыгрузкиКаталог + "\1cv8_"
			+ "_" + Формат(СтруктураПараметров.ПоследняяВерсияХранилища,"ЧЦ=10; ЧДЦ=0; ЧГ=0") + ".cf";
			
	ВыбФайл = Новый Файл(ИмяФайлаКонфигурации);
	Если ВыбФайл.Существует() Тогда
		//Может быть это он и есть, зачем еще раз выгружать. 
		//
		//ОперацииНадХранилищем.Сообщение(""+ИмяФайлаКонфигурации, "Уже существует!");
		СтруктураПараметров.Вставить("ИмяФайлаВыгрузкиКонфигурации",ИмяФайлаКонфигурации);
		ИмяФайлаВыгрузкиКонфигурации = ИмяФайлаКонфигурации;
		
		//ОперацииНадХранилищем.Сообщение("","Выгрузка завершенна");
		
		Возврат Ложь;	
		
	КонецЕсли;
	
	ВыбФайл = Неопределено;

	//СписокСтрок = СтрЗаменить(СтруктураПараметров.ПутьКБазе, """", Символы.ВК);
	//Если Найти(НРег(СтруктураПараметров.ПутьКБазе),"file") Тогда
		ПутьКБазе = " /F """ + СтруктураПараметров.ПутьКБазе + """";
	//Иначе
	//	ПутьКБазе = " /S """ + СтрПолучитьСтроку(СписокСтрок, 2) + "\" + СтрПолучитьСтроку(СписокСтрок,4) + """";
	//КонецЕсли;
	
	СтрокаЛогина = "";
	Если ЗначениеЗаполнено(СтруктураПараметров.Пользователь) Тогда
		СтрокаЛогина = " /N " + СтруктураПараметров.Пользователь
			+ " /P """ + СтруктураПараметров.Пароль + """";
	КонецЕсли;
	
	АппЛог = ПолучитьИмяФайлаЛога();
	СтрокаХранилища = " /ConfigurationRepositoryF """+СтруктураПараметров.ПутьКХранилищу+"""";
	Если ЗначениеЗаполнено(СтруктураПараметров.ПользовательХранилща) Тогда
		СтрокаЛогинаХранилища = " /ConfigurationRepositoryN "+СтруктураПараметров.ПользовательХранилща 
							+ " /ConfigurationRepositoryP """+СтруктураПараметров.ПарольХранилища+"""";
	КонецЕсли;
	
	// выполняем
	Команда = """"+Константы.ПутьКПлатформе1с.Получить()+""""
			+ " DESIGNER" + ПутьКБазе
			+ СтрокаЛогина
			+ СтрокаХранилища 
			+ СтрокаЛогинаХранилища
			+ " /ConfigurationRepositoryDumpCfg """ + ИмяФайлаКонфигурации+""""
			+ " -v "+Формат(СтруктураПараметров.ПоследняяВерсияХранилища, "ЧЦ=10; ЧДЦ=0; ЧГ=0")
			+ " /Out """+АппЛог+"""";
	//ОперацииНадХранилищем.Сообщение(Команда,"Файл когфигурации: "+ИмяФайлаКонфигурации);
	//Состояние("Выполняется выгрузка конфигурации...");
	
	ирПлатформа = ирКэш.Получить();
	ИрПлатформа.ЗапуститьСкрытоеПриложениеИДождатьсяЗавершения(Команда,,Истина,,Истина);
	
	//ЗапуститьСистему(Команда, Истина);
	
	ПоследняяВерсияХранилища = СтруктураПараметров.ПоследняяВерсияХранилища+1;
	
	СписокСтрок = Новый Массив;
	СписокСтрок.Добавить("Выгрузка конфигурации из хранилища успешно завершена");
	//БылаОшибка = ОперацииНадБазами.ВывестиФайл(АппЛог, СписокСтрок);
	
	Если Не БылаОшибка Тогда
		СтруктураПараметров.Вставить("ИмяФайлаВыгрузкиКонфигурации",ИмяФайлаКонфигурации);
		
		//ОперацииНадХранилищем.Сообщение("","Выгрузка завершенна");
	КонецЕсли;
	
	Возврат БылаОшибка;
	
КонецФункции


Функция СоздатьПустуюБазу(СтруктураПараметров) Экспорт
	Перем ИмяФайлаВыгрузкиКаталог, ПутьКБазе;
	БылаОшибка = Ложь;
	
	#Если НЕ Клиент И НЕ Сервер Тогда
	Если Ложь Тогда
		СтруктураПараметров = Справочники.Конфигурации.СоздатьЭлемент();
	КонецЕсли;
	#КонецЕсли
	
	Если ТипЗнч(СтруктураПараметров) <> Тип("Структура") Тогда
		//ОперацииНадХранилищем.Сообщение("Неперавильный параметр");
		Возврат Истина;
	КонецЕсли;
	
		
	ИмяФайлаВыгрузкиКаталог = СтруктураПараметров.ПутьКДанным;
	
	ИмяКаталогаБазы = ИмяФайлаВыгрузкиКаталог + "\base_" 
		+Формат(СтруктураПараметров.ПоследняяВерсияХранилища,"ЧЦ=10; ЧДЦ=0; ЧГ=0");
	СоздатьКаталог(ИмяКаталогаБазы);
	
	ВыбФайл = Новый Файл(ИмяКаталогаБазы+"\1Cv8.1CD");
	Если ВыбФайл.Существует() Тогда
		//Может быть это он и есть, зачем еще раз выгружать. 
		//
		//ОперацииНадХранилищем.Сообщение(""+ИмяКаталогаБазы, "Уже существует!");
		
		СтруктураПараметров.Вставить("ИмяКаталогаБазы", ИмяКаталогаБазы);
		//ОперацииНадХранилищем.Сообщение("","Создание завершенно");
		
		
		Возврат Ложь;	
		
	КонецЕсли;
	

	
	
	АппЛог = ПолучитьИмяФайлаЛога();
	
	//CREATEINFOBASE File=e:\test3; /AddInList TEST33 /UseTemplate "C:\Documents and Settings\User\My Documents\tmplts\TestVendor\TestConfig\1Cv8.cf"
	

	СписокСтрок = СтрЗаменить(СтруктураПараметров.ПутьКБазе, """", Символы.ВК);
	//Если Найти(НРег(СтруктураПараметров.ПутьКБазе),"file") Тогда
		ПутьКБазе = " /F """ + СтруктураПараметров.ПутьКБазе + """";
	//Иначе
	//	ПутьКБазе = " /S """ + СтрПолучитьСтроку(СписокСтрок, 2) + "\" + СтрПолучитьСтроку(СписокСтрок,4) + """";
	//КонецЕсли;
	//
	СтрокаЛогина = "";
	Если ЗначениеЗаполнено(СтруктураПараметров.Пользователь) Тогда
		СтрокаЛогина = " /N " + СтруктураПараметров.Пользователь
			+ " /P """ + СтруктураПараметров.Пароль + """";
	КонецЕсли;
	
	//АппЛог = КаталогВременныхФайлов()+"app_"+Формат(ТекущаяДата(),"ДФ=yyyy-MM-dd-mm-ss")+".log";
	
	// выполняем
	Команда = """"+Константы.ПутьКПлатформе1с.Получить()+""""
			+ " CREATEINFOBASE  File=""" + ИмяКаталогаБазы+""""
			+ " /UseTemplate """+СтруктураПараметров.ИмяФайлаВыгрузкиКонфигурации+""""
			+ " /Out """+АппЛог+"""";
			
	//ОперацииНадХранилищем.Сообщение(Команда,"Создание базы: "+ИмяКаталогаБазы);
	//Состояние("Выполняется создание пустой базы ...");
	ЗапуститьСкрытоеПриложениеИДождатьсяЗавершения(Команда);
	
	ФайлЛог = Новый Файл(АппЛог);
	Для Индекс = 1  По 500 Цикл
		
		Если ФайлЛог.Существует() Тогда
			Если ФайлЛог.Размер()>0 Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		глВремя_Задержка(10);
		
	КонецЦикла;
	//ЗапуститьСистему(Команда, истина);
	
	
	СписокСтрок = Новый Массив;
	СписокСтрок.Добавить("успешно завершено");
	БылаОшибка = ОперацииНадБазами.ВывестиФайл(АппЛог, СписокСтрок);
	
	Если Не БылаОшибка Тогда
		СтруктураПараметров.Вставить("ИмяКаталогаБазы", ИмяКаталогаБазы);
		
		//ОперацииНадХранилищем.Сообщение("","Создание завершенно");
	КонецЕсли;
	
	Возврат БылаОшибка;
	
	
	
	//  CREATEINFOBASE File=e:\test3; /AddInList TEST33 /UseTemplate "C:\Documents and Settings\User\My Documents\tmplts\TestVendor\TestConfig\1Cv8.cf"

	
КонецФункции

//Функция ВывестиФайл(ИмяФайла,СтрокаСравнение="",СтрокаПроверки=0) Экспорт
// возвращает истина если выведен_файл/не_найдена_фраза
Функция ВывестиФайл(ИмяФайла,СписокСтрокПоиска) Экспорт
	
	// проверим есть ли файл
	Файл = Новый Файл(ИмяФайла);
	Если Файл.Существует() Тогда
		ФайлОтчета = Новый ТекстовыйДокумент;
		Попытка
			ФайлОтчета.Прочитать(ИмяФайла);
		Исключение
			Сообщить("При выводе файла возникла ошибка: "+ОписаниеОшибки());
			БылаОшибка = Истина;
		КонецПопытки;
		
		//Если СтрокаСравнение <> "" Тогда
		//	Если ФайлОтчета.КоличествоСтрок() > 0 Тогда
		//		Если СтрокаПроверки = 0 Тогда
		//			СтрокаПроверки = 1;
		//		ИначеЕсли СтрокаПроверки = -1 Тогда
		//			СтрокаПроверки = ФайлОтчета.КоличествоСтрок();
		//		КонецЕсли;
		//		Если СокрЛП(ФайлОтчета.ПолучитьСтроку(СтрокаПроверки)) <> СокрЛП(СтрокаСравнение) Тогда
		//			БылаОшибка = истина;
		//		КонецЕсли;
		//	КонецЕсли;
		//Иначе
		//	БылаОшибка = истина; // выводить файл если не задан текст удачного действия
		//КонецЕсли;
		
		// надо ли выводить при ошибке
		Если СписокСтрокПоиска <> Неопределено Тогда
			Для Инд = 1 По ФайлОтчета.КоличествоСтрок() Цикл
				СтрокаПроверки = ВРег(ФайлОтчета.ПолучитьСтроку(Инд));
				Для Каждого СтрПоиска Из СписокСтрокПоиска Цикл
					ВФразаПоиска = ВРег(СтрПоиска);
					Если СтрЧислоВхождений(СтрокаПроверки, ВФразаПоиска) <> 0 Тогда
						// не будем выводить
						Возврат Ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		// вывести если строки не нашлись
		Сообщить("+---/ "+ИмяФайла+" /-------------------------------");
		Для Инд = 1 По ФайлОтчета.КоличествоСтрок() Цикл
			Сообщить("|"+ФайлОтчета.ПолучитьСтроку(Инд));
		КонецЦикла;
		Сообщить("+-------------");
	КонецЕсли;
	
	Возврат Истина;
КонецФункции




Функция ВыгрузитьМодули(СтруктураПараметров) Экспорт
	Перем ПутьКБазе;
	
	СписокСтрок = СтрЗаменить(СтруктураПараметров.ИмяКаталогаБазы, """", Символы.ВК);
	
	ИмяФайлаВыгрузкиКаталог = СтруктураПараметров.ПутьКДанным;
	
	КаталогВыгрузки = ИмяФайлаВыгрузкиКаталог + "\DumpConfigFiles_" 
		+ "_" + Формат(СтруктураПараметров.ПоследняяВерсияХранилища,"ЧЦ=10; ЧДЦ=0; ЧГ=0");
	СоздатьКаталог(КаталогВыгрузки);
	
	//ВыбФайл = Новый Файл(ИмяКаталогаБазы+"\1Cv8.1CD");
	МассивФайлов = НайтиФайлы(КаталогВыгрузки, "*.*");
	Если МассивФайлов.Количество() > 0 Тогда
		//Может быть это он и есть, зачем еще раз выгружать. 
		//
		//ОперацииНадХранилищем.Сообщение(""+КаталогВыгрузки, "Уже существует!");
		СтруктураПараметров.Вставить("КаталогВыгрузки", КаталогВыгрузки);
		//СтруктураПараметров.Вставить("ИмяКаталогаБазы", ИмяКаталогаБазы);
		//ОперацииНадХранилищем.Сообщение("","Выгрузка завершенна");
		
		Возврат Ложь;	
		
	КонецЕсли;
	
	

	//Если Найти(НРег(Конфигурация.ПутьКБазе),"file") Тогда
		ПутьКБазе = " /F """ + СтруктураПараметров.ИмяКаталогаБазы + """";
	//Иначе
		//ПутьКБазе = " /S """ + СтрПолучитьСтроку(СписокСтрок, 2) + "\" + СтрПолучитьСтроку(СписокСтрок,4) + """";
	//КонецЕсли;
	
	СтрокаЛогина = "";
	//Если ЗначениеЗаполнено(Конфигурация.Пользователь) Тогда
	//	СтрокаЛогина = " /N " + Конфигурация.Пользователь
	//		+ " /P " + Конфигурация.Пароль;
	//КонецЕсли;
	
	АппЛог = ПолучитьИмяФайлаЛога();
	ПутьК1С83 = Константы.ПутьКПлатформе1с83.Получить();
	Если ПустаяСтрока(ПутьК1С83) Тогда
		Команда = """"+Константы.ПутьКПлатформе1с.Получить()+""""
			+ " DESIGNER " + ПутьКБазе
			+ СтрокаЛогина
			+ " /Visible"
			+ " /DumpConfigFiles """ + КаталогВыгрузки + """ -Module -Template -AllWritable -Right -Picture"
			+ " /Out """+АппЛог+"""";
	Иначе
		Команда = """"+ПутьК1С83+""""
			+ " DESIGNER " + ПутьКБазе
			+ СтрокаЛогина
			+ " /Visible"
			+ " /DumpConfigToFiles """ + КаталогВыгрузки + """"
			+ " /Out """+АппЛог+"""";
	КонецЕсли;
	
	
	//ОперацииНадХранилищем.Сообщение(Команда,"Выгрузка конфигурации: "+СтруктураПараметров.ИмяКаталогаБазы);
		
	//Состояние("Выполняется выгрузка модулей конфигурации ...");
	
	СписокФайлов = НайтиФайлы(КаталогВыгрузки, "*.*");
	ирПлатформа = ирКэш.Получить();
	Если СписокФайлов.Количество() > 0 Тогда
	Иначе
		ИрПлатформа.ЗапуститьСкрытоеПриложениеИДождатьсяЗавершения(Команда);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("КаталогВыгрузки", КаталогВыгрузки);
	
	Возврат Ложь;
КонецФункции

Процедура СкопироватьСтруктуруИСделатьCommit(СтруктураПараметров) Экспорт
	Перем КаталогСтруктуры;
	
	ИмяФайлаВыгрузкиКаталог = СтруктураПараметров.ПутьКДанным;
	КаталогВыгрузки         = СтруктураПараметров.КаталогВыгрузки;
	
	Если НЕ СтруктураПараметров.Свойство("КаталогСтруктуры", КаталогСтруктуры) Тогда
		КаталогСтруктуры = ИмяФайлаВыгрузкиКаталог+"\DumpConfigCatalogs_"
		+ "_" + Формат(СтруктураПараметров.ПоследняяВерсияХранилища,"ЧЦ=10; ЧДЦ=0; ЧГ=0");
	КонецЕсли;
	
	
	СтрокаКомманды = "taskkill /im TGitCache.exe ";
	ирПлатформа = ирКэш.Получить();
	ИрПлатформа.ЗапуститьСкрытоеПриложениеИДождатьсяЗавершения(СтрокаКомманды,,Истина,,Истина);
	//КомандаСистемы(СтрокаКомманды);
	
	//Удалим все каталоги с файлами в папке для разбора, кроме папки с сточки начинающейся.
	//
	МассивФайлов = НайтиФайлы(КаталогСтруктуры, "*.*");
	Если МассивФайлов.Количество()>0 Тогда
		Для каждого ЭлементМассива Из МассивФайлов Цикл
			Если ЭлементМассива.Имя = ".git" Тогда
				Продолжить;
			КонецЕсли;
			УдалитьФайлы(ЭлементМассива.ПолноеИмя);
		КонецЦикла;
	КонецЕсли;
		
	ТаблицаПереименований = Новый ТаблицаЗначений;
	Переименования = Новый ТаблицаЗначений;
	Переименования.Колонки.Добавить("Источник", Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(500, ДопустимаяДлина.Переменная)));
	Переименования.Колонки.Добавить("Приемник", Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(500, ДопустимаяДлина.Переменная)));
	//Переименования.Индексы.Добавить("<ИменаКолонок>");	
	
	СписокФайлов = НайтиФайлы(КаталогВыгрузки, "*.*");
	Для каждого Файл Из СписокФайлов Цикл
		Если Файл.ЭтоКаталог() Тогда
			
			Если Прав(Файл.Имя, 5) = "files" Тогда // файлы справки. 
				МассивФайлов = НайтиФайлы(Файл.ПолноеИмя, "*.*");
				ИмяНовогоФайла = Лев(Файл.Имя, СтрДлина(Файл.Имя)-6);
				ИмяНовогоФайла = СтрЗаменить(ИмяНовогоФайла, ".", "\")+".del";
				НовыйФайл = Новый Файл(КаталогСтруктуры+"\"+ИмяНовогоФайла);
				НовыйКаталог = Новый Файл(НовыйФайл.Путь);
				Если НЕ НовыйКаталог.Существует() Тогда
					СоздатьКаталог(НовыйКаталог.ПолноеИмя);
				КонецЕсли;
				НовыйФайл = Новый Файл(НовыйКаталог.ПолноеИмя+"\"+Файл.Имя);
				Если Не НовыйФайл.Существует() Тогда
					СоздатьКаталог(НовыйФайл.ПолноеИмя);
				КонецЕсли;
				Для каждого ЭлементЦикла Из МассивФайлов Цикл
					//КопироватьФайл(ЭлементЦикла.ПолноеИмя, НовыйФайл.ПолноеИмя+"\"+ЭлементЦикла.Имя);
					НоваяСтрока = Переименования.Добавить();
					НоваяСтрока.Источник = Файл.Имя+"\"+ЭлементЦикла.Имя;
					НоваяСтрока.Приемник = СтрЗаменить(НовыйФайл.ПолноеИмя+"\"+ЭлементЦикла.Имя, КаталогСтруктуры+"\", "");
				КонецЦикла;
			КонецЕсли;
			Продолжить;	
		КонецЕсли;
		ИмяФайла = Файл.ИмяБезРасширения;
		//Форма.Модуль --> МодульФормы
		Если Прав(ИмяФайла, 12) = "Форма.Модуль" Тогда
			ИмяФайла = Лев(ИмяФайла, СтрДлина(ИмяФайла)-12)+"МодульФормы";
		КонецЕсли;
		
		Если Прав(ИмяФайла, 6) = ".Макет" Тогда
			ИмяФайла = Лев(ИмяФайла, СтрДлина(ИмяФайла)-6);
		КонецЕсли;
		
		Если Прав(ИмяФайла, 17) = ".Картинка.Picture" Тогда
			ИмяФайла = Лев(ИмяФайла, СтрДлина(ИмяФайла)-17);
		КонецЕсли;
		
		Если Прав(ИмяФайла, 5) = ".Form" Тогда
			
		КонецЕсли;
		
		// Для 8.3 если файл содерижт всего одну точку в именни, тогда создаим папки и туда его и кинем. 
		// 
		
		Если СтрЧислоВхождений(ИмяФайла, ".") = 1 Тогда
			//Увеличим наименование на Наименование объекта конфигурации описываемого. 
			//
			НаименованиеОбъектаМетаданных = Сред(ИмяФайла, Найти(ИмяФайла, "."));
			ИмяФайла = СтрЗаменить(ИмяФайла, НаименованиеОбъектаМетаданных,НаименованиеОбъектаМетаданных+НаименованиеОбъектаМетаданных);
		КонецЕсли;
		
		ИмяНовогоФайла = СтрЗаменить(ИмяФайла, ".", "\")+Файл.Расширение;
		НовыйФайл = Новый Файл(КаталогСтруктуры+"\"+ИмяНовогоФайла);
		НовыйКаталог = Новый Файл(НовыйФайл.Путь);
		Если НЕ НовыйКаталог.Существует() Тогда
			СоздатьКаталог(НовыйКаталог.ПолноеИмя);
		КонецЕсли;
		НоваяСтрока = Переименования.Добавить();
		НоваяСтрока.Источник = Файл.Имя;
		НоваяСтрока.Приемник = ИмяНовогоФайла;
				
		КопироватьФайл(Файл.ПолноеИмя, НовыйФайл.ПолноеИмя);
		
		Если Прав(Файл.ПолноеИмя, 5) = ".Form" Тогда
			
			Если ФайлПрограммыРаспаковки=Неопределено тогда
				Инициализация();
			КонецЕсли;
			
			КаталогФормы = НовыйКаталог.ПолноеИмя+"\"+НовыйФайл.ИмяБезРасширения;
			СоздатьКаталог(КаталогФормы);
			
			Распаковка(НовыйФайл.ПолноеИмя, КаталогФормы);
			
		КонецЕсли;
		//"000009d5 000009d5 7fffffff"
		
	КонецЦикла;
	
	Переименования.Сортировать("Источник");
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	Для каждого ЭлементСтроки Из Переименования Цикл
		ТекстовыйДокумент.ДобавитьСтроку(ЭлементСтроки.Источник+"-->"+ЭлементСтроки.Приемник);
	КонецЦикла;
	ТекстовыйДокумент.Записать(КаталогСтруктуры+"\renames.txt");
	
	Если ЗначениеЗаполнено(СтруктураПараметров.Версия) Тогда
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.УстановитьТекст(""+Строка(СтруктураПараметров.Версия));
		ТекстовыйДокумент.Записать(КаталогСтруктуры+"\VERSION");
	КонецЕсли;
	
	//Чисто git комманды. 
	//
	//Проверим существует ли репозитарий. 
	//
	Файл = Новый Файл(КаталогСтруктуры+"\.git");
	Если Файл.Существует() Тогда
		ИмяФайлаКомментария = ПолучитьИмяВременногоФайла("txt");
		файлКомментария = Новый ТекстовыйДокумент;
		файлКомментария.УстановитьТекст(СтруктураПараметров.Комментарий);
		файлКомментария.Записать(ИмяФайлаКомментария, "windows-1251");
		ФайлДляВыполнения = Новый ТекстовыйДокумент;
		ФайлДляВыполнения.ДобавитьСтроку("cd /d """ + КаталогСтруктуры+"""");
		ФайлДляВыполнения.ДобавитьСтроку("git add .");
		//СтрокаДляЗаписи = "git commit -a --file="""+ИмяФайлаКомментария+""" --author="""+СтруктураПараметров.Автор+" <"+СтруктураПараметров.Автор+"@localhost"+"> """
		СтрокаДляЗаписи = "git commit -a --file="""+ИмяФайлаКомментария+""" --author="""+СтруктураПараметров.Автор+" <"+СтруктураПараметров.Автор+">"+"""";
		ФайлДляВыполнения.ДобавитьСтроку(СтрокаДляЗаписи);
		//ФайлДляВыполнения.ДобавитьСтроку("git tag -a "+СтруктураПараметров.Тэг +" -m "+СтруктураПараметров.Тэг);
		ИмяФайлаВыполнения = ПолучитьИмяВременногоФайла("bat");
		ФайлДляВыполнения.Записать(ИмяФайлаВыполнения, "cp866");
		
		ирПлатформа = ирКэш.Получить();
		ИрПлатформа.ЗапуститьСкрытоеПриложениеИДождатьсяЗавершения(ИмяФайлаВыполнения,,Истина,,Истина);
		
	КонецЕсли;
	
	
	
КонецПроцедуры


// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>;
//  ИмяФайлаРезультата – Краткое имя файла, в который будет выведен выходной поток, только в текущем каталоге.
//
Процедура ЗапуститьСкрытоеПриложениеИДождатьсяЗавершения(Знач СтрокаЗапуска, ТекущийКаталог = "\.", ИспользоватьWSH = Ложь,
	КраткоеИмяФайлаРезультата = "", ОжидатьЗавершения = Истина) Экспорт 

	//#Если Клиент Тогда
	//// Баг платформы здесь будет работать. Во время работы данной строки окно продолжает принимать команды! 
	//// WSH не использовать при генерации внешних обработок
	//Если ИспользоватьWSH Тогда
	//#КонецЕсли
		СтарыйТекущийКаталог = WshShell.CurrentDirectory;
		WshShell.CurrentDirectory = ТекущийКаталог;
		СтрокаЗапуска = "cmd.exe /c """ + СтрокаЗапуска + """";
		Если КраткоеИмяФайлаРезультата <> "" Тогда
			СтрокаЗапуска = СтрокаЗапуска + " > " + КраткоеИмяФайлаРезультата;
			СтрокаЗапуска = СтрокаЗапуска + " 2>&1"; //stderr
		КонецЕсли;
		Попытка
			WshShell.Run(СтрокаЗапуска, 0, 1);
		Исключение
			// Для x64 ОС
			СтрокаЗапуска = "%windir%\Sysnative\" + СтрокаЗапуска;
			WshShell.Run(СтрокаЗапуска, 0, 1);
		КонецПопытки;
		WshShell.CurrentDirectory = СтарыйТекущийКаталог;
	//#Если Клиент Тогда
	//Иначе
	//	ПолучитьИсполнительСкрытыхКомандСистемы();
	//	//КонечнаяСтрока = ИсполнительСкрытыхКомандСистемы + " /nowindow /wait /silent /D=""" + ТекущийКаталог + """ " + СтрокаЗапуска;
	//	КонечнаяСтрока = ИсполнительСкрытыхКомандСистемы + " /nowindow /wait /silent /D=""" + ТекущийКаталог + """ """ + СтрокаЗапуска + """";
	//	ЗапуститьПриложение(КонечнаяСтрока, , ОжидатьЗавершения);
	//КонецЕсли;
	//#КонецЕсли
	
КонецПроцедуры // ЗапуститьСкрытоеПриложениеИДождатьсяЗавершения()


Процедура глВремя_Задержка(чСекунд) Экспорт

	
	Для Счетчик = 1 По чСекунд Цикл
			ЗапуститьСкрытоеПриложениеИДождатьсяЗавершения("ping -n 2 127.0.0.1");
	КонецЦикла; 
	
КонецПроцедуры


Процедура СохранитьРеквизитыИТабличныеЧасти (Объект, ИмяФайлаXML=Неопределено) Экспорт
    ФайлXML = Новый ЗаписьXML;
    ФайлXML.ОткрытьФайл(ИмяФайлаXML);
    ФайлXML.ЗаписатьОбъявлениеXML();
    ФайлXML.ЗаписатьНачалоЭлемента("Root");
    ФайлXML.ЗаписатьАтрибут("Объект",Объект.Метаданные().Имя);
//Сохраняем реквизиты
    Для Каждого Реквизит Из Объект.Метаданные().Реквизиты Цикл
        ФайлXML.ЗаписатьНачалоЭлемента("Реквизит");
        ФайлXML.ЗаписатьАтрибут("Имя", Реквизит.Имя);
        ТипЗначения = ТипЗнч(Объект[Реквизит.Имя]);
        Если Не ТипЗначения = Тип("Неопределено") Тогда
            ФайлXML.ЗаписатьАтрибут("ИмяТипа", XMLТип(ТипЗначения).ИмяТипа);
            ФайлXML.ЗаписатьАтрибут("URI", XMLТип(ТипЗначения).URIПространстваИмен);
        КонецЕсли;
        ФайлXML.ЗаписатьТекст(XMLСтрока(Объект[Реквизит.Имя]));
        ФайлXML.ЗаписатьКонецЭлемента();
    КонецЦикла;
//Сохраняем табличные части
    Для Каждого ТЧ из Объект.Метаданные().ТабличныеЧасти Цикл
        ФайлXML.ЗаписатьНачалоЭлемента("ТабличнаяЧасть");
        ФайлXML.ЗаписатьАтрибут("Имя", ТЧ.Имя);
        Для Каждого СтрокаТЧ из Объект[ТЧ.Имя] Цикл
            ФайлXML.ЗаписатьНачалоЭлемента("ЭлементКоллекции");
            Для Каждого РеквизитТЧ Из ТЧ.Реквизиты Цикл
                ФайлXML.ЗаписатьНачалоЭлемента("Реквизит");
                ФайлXML.ЗаписатьАтрибут("Имя", РеквизитТЧ.Имя);
                ТипЗначения = ТипЗнч(СтрокаТЧ[РеквизитТЧ.Имя]);
                Если Не ТипЗначения = Тип("Неопределено") Тогда
                    ФайлXML.ЗаписатьАтрибут("ИмяТипа", XMLТип(ТипЗначения).ИмяТипа);
                    ФайлXML.ЗаписатьАтрибут("URI", XMLТип(ТипЗначения).URIПространстваИмен);
                КонецЕсли;
                ФайлXML.ЗаписатьТекст(XMLСтрока(СтрокаТЧ[РеквизитТЧ.Имя]));
                ФайлXML.ЗаписатьКонецЭлемента();
            КонецЦикла;
            ФайлXML.ЗаписатьКонецЭлемента();
        КонецЦикла;
        ФайлXML.ЗаписатьКонецЭлемента();
    КонецЦикла;
    Если Не ФайлXML=Null Тогда
        ФайлXML.ЗаписатьКонецЭлемента();
        ФайлXML.Закрыть();
    КонецЕсли;
КонецПроцедуры

Процедура ЗагрузитьРеквизитыИТабличныеЧасти(Объект, ИмяФайлаXML=Неопределено) Экспорт
    Если Не ИмяФайлаXML = Неопределено Тогда
        ФайлXML = Новый ЧтениеXML;
        ФайлXML.ОткрытьФайл(ИмяФайлаXML);
        Пока ФайлXML.Прочитать() Цикл
            Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
                ЗагрузитьОбъектРекурсивно(ФайлXML, Объект, ФайлXML.Имя);
            КонецЕсли
        КонецЦикла;
    КонецЕсли;
КонецПроцедуры

Процедура ЗагрузитьОбъектРекурсивно(ФайлXML, Объект, знач ИмяУзла)
    ИмяТипа = "";
    ПространствоИмен = "";
    Пока ФайлXML.ПрочитатьАтрибут() Цикл
        Если ФайлXML.Имя = "ИмяТипа" Тогда
            ИмяТипа = ФайлXML.Значение;
        ИначеЕсли ФайлXML.Имя = "URI" Тогда
            ПространствоИмен = ФайлXML.Значение;
        КонецЕсли;
    КонецЦикла;
    Пока ФайлXML.Прочитать() Цикл
        Если ФайлXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ФайлXML.Имя = ИмяУзла Тогда
            Возврат;
        ИначеЕсли ФайлXML.ТипУзла = ТипУзлаXML.Текст Тогда
            ТипОбъекта = ИзXMLТипа(ИмяТипа, ПространствоИмен);
            Если НЕ ТипОбъекта = Неопределено тогда
                Объект = XMLЗначение(ТипОбъекта, ФайлXML.Значение);
            КонецЕсли;
        ИначеЕсли ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
            ИмяТекУзла = ФайлXML.Имя;
            Если ФайлXML.Имя = "ЭлементКоллекции" Тогда
                ЗагрузитьОбъектРекурсивно(ФайлXML, Объект.Добавить(), ИмяТекУзла);
            Иначе
                Если ФайлXML.ПрочитатьАтрибут() Тогда
                    ЗагрузитьОбъектРекурсивно(ФайлXML, Объект[ФайлXML.Значение], ИмяТекУзла);
                КонецЕсли;
            КонецЕсли;
        КонецЕсли;
    КонецЦикла;
КонецПроцедуры

Процедура ОбарботатьПараметрыЗапуска() Экспорт
	
	Если ПустаяСтрока(ПараметрЗапуска) Тогда
		Возврат ;
	КонецЕсли;
	
	// Параметр может состоять из частей, разделенных символом ";".
	// Первая часть - главное значение параметра запуска. 
	// Наличие дополнительных частей определяется логикой обработки главного параметра.
	МассивПараметрыЗапуска = ПолучитьМассивИзСтрокиСРазделителем(ПараметрЗапуска,";");
	Для Номер = 0 По МассивПараметрыЗапуска.Количество()-1 Цикл
		ЭлементМассива = МассивПараметрыЗапуска.Получить(Номер);
		Если ВРег(ЭлементМассива) = ВРег("path83") И Номер+1<=МассивПараметрыЗапуска.Количество()-1 Тогда
			ПутьКПлатформе1с83 = МассивПараметрыЗапуска.Получить(Номер+1);
			Файл = Новый Файл(Путь);
			Если НЕ Файл.Существует() ИЛИ НЕ Файл.ЭтоКаталог() Тогда
				ПутьКПлатформе1с83 = "";
			КонецЕсли;
		КонецЕсли;
		
		Если ВРег(ЭлементМассива) = ВРег("unittestauto") Тогда
			мАвтозапускТестовыхНаборов = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(Путь) Тогда
		Форма_ЗагрузитьТестовыеНаборы();
	КонецЕсли;
	
	
	
КонецПроцедуры

// Функция разбивает строку разделителем.
// 
// Параметры:
//  пСтрока      - Строка - которую разбиваем;
//  *пРазделитель - Строка, "." - символ-разделитель;
//  *ОбрезатьНепечатныеСимволы - Булево, *Ложь - делать СокрЛП.
//  *ОставлятьПустуюСтроку - Булево, *Истина - если передана пустая строка, то добавлять ее в массив.
//
// Возвращаемое значение:
//  Массив - фрагментов.
//
Функция ПолучитьМассивИзСтрокиСРазделителем(Знач Стр, Разделитель = ".", ОбрезатьНепечатныеСимволы = Ложь, ОставлятьПустуюСтроку = Истина) Экспорт
	
	МассивСтрок = Новый Массив;
	Если Истина
		И Не ОставлятьПустуюСтроку 
		И ПустаяСтрока(Стр)
	Тогда
		Возврат МассивСтрок;
	КонецЕсли; 
	
	//лСтрока = СтрЗаменить(Стр, Разделитель, Символы.ПС);
	//// Баг платформы. СтрЧислоСтрок не учитывает терминальный перевод строки.
	//ЧислоСтрок = СтрЧислоСтрок(лСтрока + " ");
	//Для Счетчик = 1 По ЧислоСтрок Цикл 
	//	Фрагмент = СтрПолучитьСтроку(лСтрока, Счетчик);
	//	Если ОбрезатьНепечатныеСимволы Тогда
	//		Фрагмент = СокрЛП(Фрагмент);
	//	КонецЕсли;
	//	МассивСтрок.Добавить(Фрагмент);
	//КонецЦикла;
	
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				Фрагмент = Стр;
				Если ОбрезатьНепечатныеСимволы Тогда
					Фрагмент = СокрЛП(Фрагмент);
				КонецЕсли;
				МассивСтрок.Добавить(Фрагмент);
				Возврат МассивСтрок;
			КонецЕсли;
			Фрагмент = Лев(Стр,Поз-1);
			Если ОбрезатьНепечатныеСимволы Тогда
				Фрагмент = СокрЛП(Фрагмент);
			КонецЕсли;
			МассивСтрок.Добавить(Фрагмент);
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;

	Возврат МассивСтрок;
		
КонецФункции // ЛксПолучитьМассивИзСтрокиСРазделителем()


WshShell = Новый COMОбъект("WScript.Shell");

