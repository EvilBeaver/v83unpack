//////////////////////////////
// ВНЕШНИЕ КОМПОНЕНТЫ

Перем WshShell Экспорт;
Перем ФайлПрограммыРаспаковки; //в качестве програмы распаковки используется программа V8Unpack 2.0 от disa_da из публикации http://infostart.ru/public/15695/
Перем ФайлDLL;                 // zlib1.dll - нужен для работы программы распаковки
Перем ФайлОбработкиВыгрузкиМетаданных; // Обработка выгрузки метаданных для 8.1 / 8.2
/////////////////////////////
// РАБОЧИЕ ПЕРЕМЕННЫЕ

Перем ПутьКПлатформе1с;
Перем ВнешнниеКомпонентыЗагружены;
Перем СтруктураДополнительногоПереименования; // Для дополнительного переименования файлов
Перем СоответствиеПереименованияПапок; // Для переименования папок на русский язык
/////////////////////////////
// ОСНОВНАЯ ПРОГРАММА

Процедура ВыполнитьВсеДействия() Экспорт
	
	Инициализация();
	
	ВыполнитьВыгрузкуМодулей();
	ВыполнитьКоммит();
	
КонецПроцедуры

Процедура ВыполнитьКоммит() Экспорт
	
	Если Не СделатьКоммит Тогда
		Возврат;
	КонецЕсли;
	
	Инициализация();
	
	ПутьКРепозиториюGit = ДополнитьСлешВПуть(ПутьКРепозиториюGit);

	ВыполнитьКоммитГит(ПутьКРепозиториюGit, Комментарий, Автор);
	
КонецПроцедуры

Процедура ВыполнитьВыгрузкуМодулей() Экспорт
	
	Инициализация();
	
	Если Режим83 = 0 Тогда
		ПутьКПлатформе1с = ПолучитьПутьПлатформы1С_82();
	Иначе	
		ПутьКПлатформе1с = ПолучитьПутьПлатформы1С_83();		
	КонецЕсли;
	
	Если ВыборКонфигурации = 1 Тогда 
		 ПолучитьКонфигурациюИзТекущейБазы()
	КонецЕсли;
		
	
	Логин = "";
	Пароль = "";
	ПутьКРепозиториюGit = ДополнитьСлешВПуть(ПутьКРепозиториюGit);
	
	успешно = РазложитьКонфигурацию1СПоПапкамСогласноИерархииМетаданных(Логин, Пароль, ПутьКФайлуКонфигурации, ПутьКРепозиториюGit); //СтруктураПараметров.КаталогВыгрузкиВсехМодулей83, СтруктураПараметров.КаталогВыгрузки);
	
	Проверить(успешно, "РазложитьКонфигурацию1СПоПапкамСогласноИерархииМетаданных");
	
		
	
КонецПроцедуры
	
Функция ВыполнитьВыгрузкуМетаданные81(ПутьКБазе, ИмяФайлаВыгрузкиМетаданных) Экспорт
	
	Если Не ВыгрузитьМетаданные81 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ФайлОбработкиВыгрузкиМетаданных = Неопределено Тогда
		
		ФайлОбработкиВыгрузкиМетаданных = _КаталогВременныхФайлов()+"ОбработкаВыгрузкиМетаданных.epf";
		
		ДвоичныеФайлОбработкиВыгрузкиМетаданных = ПолучитьМакет("ОбработкаВыгрузкиМетаданных");
		ДвоичныеФайлОбработкиВыгрузкиМетаданных.Записать(ФайлОбработкиВыгрузкиМетаданных);
		
	КонецЕсли;
	
	ВывестиОтладочноеСообщение("Начало выгрузка метаданных базы "+ТекущаяДата());
	
	Если ПроверитьСуществованиеФайлаКаталога(ИмяФайлаВыгрузкиМетаданных, "файл с выгруженными метаданными базы") Тогда //СтруктураПараметров.ИмяФайлаВыгрузкиКонфигурации
		Попытка
			УдалитьФайлы(ИмяФайлаВыгрузкиМетаданных);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если Не ПроверитьСуществованиеФайлаКаталога(ПутьКБазе, "путь к базе <"+ПутьКБазе+">") Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	
	БылаОшибка = Ложь;
	
	АппЛог = ПолучитьВременноеИмяФайлаЛога();
	
	Команда = """"+ПутьКПлатформе1с+"""" 
	+ " ENTERPRISE "+ПолучитьПодстрокуКомандыЗапуска1С_БазаДанных(ПутьКБазе)
	+ " /C""" + ИмяФайлаВыгрузкиМетаданных+""""
	+ " /Execute"""+ ФайлОбработкиВыгрузкиМетаданных + """" 
	+ " /Out"""+АппЛог+"""";
	
	ВывестиОтладочноеСообщение(Команда);
	ЗапуститьСкрытоеПриложениеИДождатьсяЗавершения(Команда);
	
	СтрокаПроверкиОшибки = "Сохранение конфигурации успешно завершено";
	
	ФайлЛог = Новый Файл(АппЛог);
	
	СписокСтрок = Новый Массив;
	СписокСтрок.Добавить(СтрокаПроверкиОшибки);	
	БылаОшибка = Ложь;//ВывестиФайл(АппЛог, СписокСтрок);
	Если Не БылаОшибка Тогда
		//УдалитьВременныеФайлыВПопытке(АппЛог);
	КонецЕсли;
	
	ВывестиОтладочноеСообщение("Завершение: выгрузка конфигурации "+ТекущаяДата());
	
	Возврат НЕ БылаОшибка;
	
	
КонецФункции	

Процедура ВыполнитьЗагрузкуМодулей() Экспорт
	
	Инициализация();
	
	Режим83 = 1;
	
	ПутьКПлатформе1с = ПолучитьПутьПлатформы1С_83();		
	
	Логин = "";
	Пароль = "";
	ПутьКРепозиториюGit = ДополнитьСлешВПуть(ПутьКРепозиториюGit);
	
	
	успешно = СобратьКонфигурацию1СПоПапкамСогласноИерархииМетаданных(ПутьКФайлуКонфигурации, ПутьКРепозиториюGit);
	//успешно = СобратьФайлКонфигурации(Логин, Пароль, ПутьКФайлуКонфигурации, ПутьКРепозиториюGit); //СтруктураПараметров.КаталогВыгрузкиВсехМодулей83, СтруктураПараметров.КаталогВыгрузки);
	
	Проверить(успешно, "СобратьКонфигурацию1СПоПапкамСогласноИерархииМетаданных");
	
		
	
КонецПроцедуры

Процедура Инициализация() Экспорт
	
	Если ВнешнниеКомпонентыЗагружены Тогда
		Возврат;
	КонецЕсли;
	

	Если ПустаяСтрока(РабочийКаталог) Тогда
		РабочийКаталог = КаталогВременныхФайлов();
	Иначе
		Файл = Новый Файл(РабочийКаталог);
		Если НЕ Файл.Существует() Тогда
			РабочийКаталог = КаталогВременныхФайлов();
		КонецЕсли;		
	КонецЕсли;
	//
	//Если НЕ ПустаяСтрока(ПараметрЗапуска) Тогда
	//	 ОбработатьПараметрыЗапускаПредприятия(ПараметрЗапуска);
	//КонецЕсли;
	
	РабочийКаталог = ДополнитьСлешВПуть(РабочийКаталог);	
	
	ДвоичныеДанныеПрограммыРаспаковки = ЭтотОбъект.ПолучитьМакет("UnpackV8");
	ДвоичныеДанныеDLL = ЭтотОбъект.ПолучитьМакет("zlib1");
	ДвоичныеДанныеПрограммыРаспаковки.Записать(_КаталогВременныхФайлов()+"UnpackV8.exe");
	ДвоичныеДанныеDLL.Записать(_КаталогВременныхФайлов()+"zlib1.dll");
	ФайлПрограммыРаспаковки = Новый Файл(_КаталогВременныхФайлов()+"UnpackV8.exe");
	ФайлDLL = Новый Файл(_КаталогВременныхФайлов()+"zlib1.dll");
		
	ВнешнниеКомпонентыЗагружены = Истина;
	
КонецПроцедуры

//////////////////////////////////////
// ДЛЯ ЗАПУСКА В ПАКЕТНОМ РЕЖИМЕ

Процедура ОбработатьПараметрыЗапускаПредприятия(ПараметрЗапускаПредприятия) Экспорт

	Если ПустаяСтрока(ПараметрЗапускаПредприятия) Тогда
		ВывестиОтладочноеСообщение("Отсутствуют параметры запуска");		
		Возврат;
	КонецЕсли;
	
	
	// Параметр может состоять из частей, разделенных символом ";".
	// Первая часть - главное значение параметра запуска. 
	// Наличие дополнительных частей определяется логикой обработки главного параметра.
	
	
	///////////////////////////////////////////////////////
	// TO DO СДЕЛАТЬ ОБРАБОКТУ ПАРАМЕТРОВ ПАКЕТНОГО ЗАПУСКА
	// 1. Чтение ИНИ файла с настройками
	// 2. Передача всех необходимых настроек
	
	//
	//МассивПараметрыЗапуска = РазложитьСтрокуВМассивПодстрок(ПараметрЗапуска,";");
	//
	//Для Номер = 0 По МассивПараметрыЗапуска.Количество()-1 Цикл
	//	ЭлементМассива = МассивПараметрыЗапуска.Получить(Номер);
	//	Если ВРег(ЭлементМассива) = ВРег("path83") И Номер+1<=МассивПараметрыЗапуска.Количество()-1 Тогда
	//		Путь = МассивПараметрыЗапуска.Получить(Номер+1);
	//		Файл = Новый Файл(Путь);
	//		Если НЕ Файл.Существует() ИЛИ НЕ Файл.ЭтоФайл() Тогда
	//			ПутьКПлатформе1с = ПолучитьПутьПлатформы1С_83();
	//		Иначе
	//			ПутьКПлатформе1с = Путь;
	//		КонецЕсли;
	//	ИначеЕсли ВРег(ЭлементМассива) = ВРег("patchToCF") И Номер+1<=МассивПараметрыЗапуска.Количество()-1 Тогда
	//		Путь = МассивПараметрыЗапуска.Получить(Номер+1);
	//		Файл = Новый Файл(Путь);
	//		Если НЕ Файл.Существует() ИЛИ НЕ Файл.ЭтоФайл() Тогда
	//			ПутьКФайлуКонфигурации = "";
	//		Иначе
	//			ПутьКФайлуКонфигурации = Путь;
	//		КонецЕсли;
	//		СтруктураПараметров.Вставить("ПутьКФайлуКонфигурации", ПутьКФайлуКонфигурации);
	//		
	//	ИначеЕсли ВРег(ЭлементМассива) = ВРег("patchOut") И Номер+1<=МассивПараметрыЗапуска.Количество()-1 Тогда
	//		
	//		Путь = МассивПараметрыЗапуска.Получить(Номер+1);
	//		Файл = Новый Файл(Путь);
	//		Если НЕ Файл.Существует() ИЛИ НЕ Файл.ЭтоКаталог() Тогда
	//			Попытка
	//				СоздатьКаталог(Путь);
	//				КаталогВыгрузки = Путь; //ПутьККаталогуДляВыгрузки
	//			Исключение
	//				КаталогВыгрузки = ""; //ПутьККаталогуДляВыгрузки
	//			КонецПопытки;
	//		Иначе
	//			КаталогВыгрузки = Путь; //ПутьККаталогуДляВыгрузки
	//		КонецЕсли;
	//		СтруктураПараметров.Вставить("КаталогВыгрузки", КаталогВыгрузки);
	//		
	//	ИначеЕсли ВРег(ЭлементМассива) = ВРег("patchRepo") И Номер+1<=МассивПараметрыЗапуска.Количество()-1 Тогда
	//		
	//		Путь = МассивПараметрыЗапуска.Получить(Номер+1);
	//		Файл = Новый Файл(Путь);
	//		Если НЕ Файл.Существует() Тогда
	//			ПутьКХранилищу1C = ""; //ПутьККаталогуДляВыгрузки
	//		Иначе
	//			ПутьКХранилищу1C = Файл.ПолноеИмя; //ПутьККаталогуДляВыгрузки
	//		КонецЕсли;
	//		СтруктураПараметров.Вставить("ПутьКХранилищу1C", ПутьКХранилищу1C);
	//		СтруктураПараметров.Вставить("ПутьКФайлуХранилища1С", ПутьКХранилищу1C);
	//	ИначеЕсли ВРег(ЭлементМассива) = ВРег("maxVersions") И Номер+1<=МассивПараметрыЗапуска.Количество()-1 Тогда
	//		МаксимальнаяВерсияРазбора = МассивПараметрыЗапуска.Получить(Номер+1);
	//	КонецЕсли;
	//	
	//	Если ВРег(ЭлементМассива) = ВРег("auto") Тогда
	//		мАвтозапуск = Истина;
	//	КонецЕсли;
	//	
	//	Если ВРег(ЭлементМассива) = ВРег("decompile") Тогда
	//		ВыгрузитьДанные = Истина;
	//	КонецЕсли;
	//	
	//	Если ВРег(ЭлементМассива) = ВРег("compile") Тогда
	//		ЗагрузитьДанные = Истина;
	//	КонецЕсли;
	//	
	//	Если ВРег(ЭлементМассива) = ВРег("sync1ctogit") Тогда
	//		СинхронизироватьХранилищеВГит = Истина;
	//	КонецЕсли;
	//	
	//	Если ВРег(ЭлементМассива) = ВРег("out") Тогда
	//		
	//		Путь = УбратьОбрамляющиеКавычкиЕслиЕсть(МассивПараметрыЗапуска.Получить(Номер+1));
	//		ПутьКФайлуЛогов = Путь;
	//		
	//	КонецЕсли;
	//	
	//	
	//КонецЦикла;
	//
	
КонецПроцедуры


/////////////////////////
// ТЕСТ 

Процедура Тест_ЗапуститьОбработкаКоманды(ПараметрКоманды, ПараметрыВыполненияКоманды)
	
	ИмяКомпонентыКонфигуратора = "config.dll";
	Конфигуратор = Новый Файл(КаталогПрограммы()+ИмяКомпонентыКонфигуратора);
	Если Конфигуратор.Существует() Тогда
		Команда = "1cestart.exe DESIGNER /IBConnectionString """+СтрЗаменить(СтрокаСоединенияИнформационнойБазы(),"""","""""")+""" /N System";
		ПараметрыКонфигуратора = "/UpdateDBCfg";
		ЗапуститьПриложение(Команда+" "+ПараметрыКонфигуратора,КаталогПрограммы(),Ложь);
	Иначе
		//Предупреждение("Действие не возможно. Обратитесь к администратору системы");
		Возврат;
	КонецЕсли;
	
КонецПроцедуры


/////////////////////////
// РАБОТА С ФАЙЛАМИ/КАТАЛОГАМИ

Функция КаталогСуществует(КаталогПроверки) Экспорт
	
	Файл = Новый Файл(КаталогПроверки);
	Если Файл.Существует() И Файл.ЭтоКаталог() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ОчиститьКаталог(Каталог)
	
	Файлы = НайтиФайлы(Каталог, "*.*");
	
	Если Файлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьСостояние(НСтр("ru='Идет очистка каталога ...'"));
	
	Для Каждого Файл Из Файлы Цикл
		//ОбработкаПрерыванияПользователя();
		УдалитьФайлы(Файл.ПолноеИмя);
	КонецЦикла;
	
КонецПроцедуры

Функция ФайлСуществует(ФайлПроверки) Экспорт
	
	Файл = Новый Файл(ФайлПроверки);
	Если Файл.Существует() И НЕ Файл.ЭтоКаталог() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ПроверитьСуществованиеФайлаКаталога(парамПуть, допСообщениеОшибки = "")
	Если Не ЗначениеЗаполнено(парамПуть) Тогда
		ВывестиСообщение("Не указан путь <"+допСообщениеОшибки+">");
		Возврат Ложь;
	КонецЕсли;
	
	лфайл = Новый Файл(парамПуть);
	Если Не лфайл.Существует() Тогда
		ВывестиСообщение("Не существует файл  <"+допСообщениеОшибки+">");
		Возврат Ложь;	
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

Функция ПолучитьВременноеИмяКаталога()
	
	лПуть = СтрЗаменить(ПолучитьИмяВременногоФайла("сtr"), ".сtr", "");
	СоздатьКаталог(лПуть);
	
	Возврат лПуть;
КонецФункции

Процедура УдалитьВременныеФайлыВПопытке(Путь)
	Попытка
		УдалитьФайлы(Путь);
	Исключение
		Сообщить("Попытка удаления "+Путь+" закончилась неудачей, по причине "+ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

Функция ПолучитьВременноеИмяФайлаЛога()
	
	ГСЧ = Новый ГенераторСлучайныхЧисел(ТекущаяДата()-Дата('00010101'));
	
	Возврат КаталогВременныхФайлов()+"app_"+Формат(ТекущаяДата(),"ДФ=yyyy-MM-dd-mm-ss")+Строка(ГСЧ.СлучайноеЧисло(0, 1000))+".log";;
	
КонецФункции

//Возвращает Рабочий каталог обработки: если он не был задан при инициализации, то "КаталогВременныхФайлов"
Функция _КаталогВременныхФайлов()
	Возврат РабочийКаталог;
КонецФункции

///////////////////////////////
// ЗАПУСК ИСПОЛНЯЕМЫХ ФАЙЛОВ

Функция ЗапуститьСкрытоеПриложениеИДождатьсяЗавершения(Знач СтрокаЗапуска, ТекущийКаталог = "\.", КраткоеИмяФайлаРезультата = "")
	
	ВывестиОтладочноеСообщение("Запуск команды: " + СтрокаЗапуска +"
								| в каталоге: " + ТекущийКаталог);

		
	СтарыйТекущийКаталог = WshShell.CurrentDirectory;
	WshShell.CurrentDirectory = ТекущийКаталог;
	СтрокаЗапуска = "cmd.exe /c """ + СтрокаЗапуска + """";
	Если КраткоеИмяФайлаРезультата <> "" Тогда
		СтрокаЗапуска = СтрокаЗапуска + " > " + КраткоеИмяФайлаРезультата;
		СтрокаЗапуска = СтрокаЗапуска + " 2>&1"; //stderr
	КонецЕсли;
	Попытка
		Результат = WshShell.Run(СтрокаЗапуска, 0, 1); //WshShell.Run(СтрокаЗапуска, 0, 1);
	Исключение
		// Для x64 ОС
		СтрокаЗапуска = "%windir%\Sysnative\" + СтрокаЗапуска;
		Результат = WshShell.Run(СтрокаЗапуска, 0, 1); //WshShell.Run(СтрокаЗапуска, 0, 1);
	КонецПопытки;
	WshShell.CurrentDirectory = СтарыйТекущийКаталог;
	
	Возврат Результат;
КонецФункции // ЗапуститьСкрытоеПриложениеИДождатьсяЗавершения()

///////////////////////////////////////////////////////////
// ИСПОЛЬЗВОВАНИЕ ПРОГРАММЫ UnpackV8 

Процедура Распаковка(ФайлРаспаковки, КаталогРаспаковки)
	
	ФайлДляРаспаковки= Новый файл(ФайлРаспаковки);
	Если КаталогРаспаковки="" тогда
		ИнтересующийКаталог=Новый файл(КаталогВременныхФайлов()+ФайлДляРаспаковки.Имя+".und");
		Если ИнтересующийКаталог.Существует() тогда
			ГСЧ = Новый ГенераторСлучайныхЧисел(ТекущаяДата()-Дата('00010101'));
			КаталогРаспаковки=КаталогВременныхФайлов()+ФайлДляРаспаковки.Имя+Строка(ГСЧ.СлучайноеЧисло(0, 1000)) +".und";
		Иначе
			КаталогРаспаковки=КаталогВременныхФайлов()+ФайлДляРаспаковки.Имя+".und";
		КонецЕсли;
		
	КонецЕсли;
	
	// распакуем файл

	СтрокаЗапуска = """"+ФайлПрограммыРаспаковки.ПолноеИмя+""" -parse """+ФайлДляРаспаковки.ПолноеИмя+""" """+КаталогРаспаковки+"""";
	ВывестиОтладочноеСообщение(СтрокаЗапуска);
	
	WshShell.Run(СтрокаЗапуска, 0, Истина); // TODO если будут глюки, заменить на вызов ЗапуститьСкрытоеПриложениеИДождатьсяЗавершения
КонецПроцедуры

Процедура Упаковка(ФайлРезультат, Каталог)
	
	КаталогДляУпаковки = Новый файл(Каталог);
	
	СтрокаЗапуска = """"+ФайлПрограммыРаспаковки.ПолноеИмя+""" -build """+каталогДляУпаковки.ПолноеИмя+""" """+ФайлРезультат+"""";
	ВывестиОтладочноеСообщение(СтрокаЗапуска);
	
	WshShell.Run(СтрокаЗапуска, 0, Истина);
	
КонецПроцедуры

//////////////////////////////////////////////////////////
// РЕСТРУКТОРИЗАЦИЯ КАТАЛОГА

Функция РазложитьМодули1СПоПапкамСогласноИерархииМетаданных(КаталогВыгрузкиВсехМодулей83, КаталогВыгрузки) Экспорт
	Перем КаталогИерархическойСтруктурыМодулей;
	Перем КэшПереименований;
	Перем СоотвествиеИменФайловДляПропуска;
	
	КэшПереименований = Новый Соответствие;
	
	лПутьКаталогаВыгрузкиВсехМодулей83 = КаталогВыгрузкиВсехМодулей83; //ПутьКаталогаВыгрузки;
	Если Не ПроверитьСуществованиеФайлаКаталога(лПутьКаталогаВыгрузкиВсехМодулей83, "каталог выгрузки всех модулей 8.3 - РазложитьМодули1СПоПапкамСогласноИерархииМетаданных") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КаталогИерархическойСтруктурыМодулей = КаталогВыгрузки;
	Если ПустаяСтрока(КаталогИерархическойСтруктурыМодулей) Тогда
		ВывестиСообщение("не задан каталог выгрузки модулей по иерархии - РазложитьМодули1СПоПапкамСогласноИерархииМетаданных");
		Возврат Ложь;
	КонецЕсли;
	//ВызватьИсключение "КаталогИерархическойСтруктурыМодулей (разложенные модули) не должен равняться лПутьКаталогаВыгрузки (общий набор всех файлов выгруженных из 8.3)";
	
	лФайлВыгрузкиКаталог = Новый Файл(КаталогИерархическойСтруктурыМодулей);
	Если НЕ лФайлВыгрузкиКаталог.Существует() Тогда
		СоздатьКаталог(КаталогИерархическойСтруктурыМодулей);
		Проверить(лФайлВыгрузкиКаталог.Существует(), "Не существует каталог иерархии модулей <"+КаталогИерархическойСтруктурыМодулей+">. Выполнение остановлено!");
	КонецЕсли;
	
	
	СтрокаКомманды = "taskkill /im TGitCache.exe ";
		
	ЗапуститьСкрытоеПриложениеИДождатьсяЗавершения(СтрокаКомманды); //,,Истина,,Истина);
	
	СоответствиеИменФайловДляПропуска = Новый Соответствие;
	СоответствиеИменФайловДляПропуска.Вставить(".git", Истина);
	СоответствиеИменФайловДляПропуска.Вставить("AUTHORS", Истина); //Соответствие авторов и транслитерации. 
	СоответствиеИменФайловДляПропуска.Вставить("VERSION", Истина); //Номер версии, может использоватся для синхронизации с хранилищем. 
	СоответствиеИменФайловДляПропуска.Вставить("CONFIGFILES", Истина); //Записи о выгруженной конфигурации
	
	
	//Удалим все каталоги с файлами в папке для разбора, кроме папки, начинающейся с с точки.
	МассивФайлов = НайтиФайлы(КаталогИерархическойСтруктурыМодулей, "*.*");
	Если МассивФайлов.Количество()>0 Тогда
		Для каждого ЭлементМассива Из МассивФайлов Цикл
			Если СоответствиеИменФайловДляПропуска.Получить(ЭлементМассива.Имя) = Истина Тогда
				Продолжить;
			КонецЕсли;
			//вставка - добавить массив файлов, которые есть в папке на диске, но отсутствуют в массиве загружаемых
			//после выполнения обновления такие файлы удалить (понадобится при сборке CF)
			//УдалитьФайлы(ЭлементМассива.ПолноеИмя);
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаПереименований = Новый ТаблицаЗначений;
	Переименования = Новый ТаблицаЗначений;
	Переименования.Колонки.Добавить("Источник", Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(500, ДопустимаяДлина.Переменная)));
	Переименования.Колонки.Добавить("Приемник", Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(500, ДопустимаяДлина.Переменная)));
	
	
	СписокФайлов = НайтиФайлы(лПутьКаталогаВыгрузкиВсехМодулей83, "*.*"); //СтруктураПараметров.КаталогВыгрузки
	Для каждого Файл Из СписокФайлов Цикл
		
				
		
		ИмяФайла = Файл.ИмяБезРасширения;
		
		
		//1. ШАГ Определим главную группу
		
		ПапкаИерархииБезТочки = Лев(ИмяФайла,Найти(ИмяФайла,".")-1);
		ПапкаИерархииСТочкой = ПапкаИерархииБезТочки + ".";
		
		
		ПереименованнаяПапка = СоответствиеПереименованияПапок.Получить(ПапкаИерархииБезТочки);
		
		Если ПереименованнаяПапка = Неопределено Тогда
			ПереименованнаяПапка = ПапкаИерархииБезТочки;
		КонецЕсли;
		
		ПапкаИерархии = ПереименованнаяПапка + "\"; // Будет папкой
		
		ИмяФайла = СтрЗаменить(ИмяФайла,ПапкаИерархииСТочкой,ПапкаИерархии);
	
		//Форма.Модуль --> МодульФормы
		Если Прав(ИмяФайла, 12) = "Форма.Модуль" Тогда
			ИмяФайла = Лев(ИмяФайла, СтрДлина(ИмяФайла)-12)+"МодульФормы";
		КонецЕсли;
		
		Если Прав(ИмяФайла, 6) 	= ".Макет" Тогда
			ИмяФайла = Лев(ИмяФайла, СтрДлина(ИмяФайла)-6);
		КонецЕсли;
		
		Если Прав(ИмяФайла, 17) = ".Картинка.Picture" Тогда
			ИмяФайла = Лев(ИмяФайла, СтрДлина(ИмяФайла)-17);
		КонецЕсли;
		
		
		/////////////////////////////////////////////
		// Допольнительные переименования 
		
		//Для Каждого СтруктураЗамены Из СтруктураДополнительногоПереименования Цикл
		//	ИмяФайла = СтрЗаменить(ИмяФайла,СтруктураЗамены.Ключ,СтруктураЗамены.Значение);
		//КонецЦикла;
		//
		
		
		// Выгрузка форм доступна только для режима 8.3
		
		
		ИмяНовогоФайла = ИмяФайла + Файл.Расширение;
		НовыйФайл = Новый Файл(КаталогИерархическойСтруктурыМодулей+"\"+ИмяНовогоФайла);
		НовыйКаталог = Новый Файл(НовыйФайл.Путь);
		Если НЕ НовыйКаталог.Существует() Тогда
			СоздатьКаталог(НовыйКаталог.ПолноеИмя);
		КонецЕсли;
		
		НоваяСтрока = Переименования.Добавить();
		НоваяСтрока.Источник = Файл.Имя;
		НоваяСтрока.Приемник = ИмяНовогоФайла;
		
		КопироватьФайл(Файл.ПолноеИмя, НовыйФайл.ПолноеИмя);
		
				
				
	КонецЦикла;
	
	Переименования.Сортировать("Источник");
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	Для каждого ЭлементСтроки Из Переименования Цикл
		ТекстовыйДокумент.ДобавитьСтроку(ЭлементСтроки.Источник+"-->"+ЭлементСтроки.Приемник);
	КонецЦикла;
	ТекстовыйДокумент.Записать(КаталогИерархическойСтруктурыМодулей+"\renames.txt");
	
	
	Возврат Истина;
	
КонецФункции

Функция СобратьМодули1СИзИерарархииМетаданныхВЛинейнуюСтруктуру(ЛинейныйКаталогВыгрузкиВсехМодулей83, КаталогВыгрузки) Экспорт
		
	
	ПутьКВременномуКаталогуПереименований = ПолучитьВременноеИмяКаталога(); //СтрЗаменить(ПолучитьИмяВременногоФайла("сtr"), ".сtr", "");;
	//СоздатьКаталог(ПутьКВременномуКаталогуПереименований);
	
	ИмяФайлаВыгрузкиКаталог = КаталогВыгрузки;
	файлВыгрузкиКаталог = Новый Файл(ИмяФайлаВыгрузкиКаталог);
	Проверить(файлВыгрузкиКаталог.Существует(), "файл с исходными данными не существует");
	Проверить(файлВыгрузкиКаталог.ЭтоКаталог(), "путь с исходными данными не каталог");
	
	файлПереименований = Новый Файл(файлВыгрузкиКаталог.ПолноеИмя + "\renames.txt");
	Проверить(файлПереименований.Существует(), "файл со списком переименований существует. ");
	
	СтрокаКомманды = "taskkill /im TGitCache.exe ";
	ВывестиОтладочноеСообщение("СобратьМодули1СИзИерарархииМетаданныхВЛинейнуюСтруктуру: команда "+ СтрокаКомманды);
	
	ЗапуститьСкрытоеПриложениеИДождатьсяЗавершения(СтрокаКомманды); //,,Истина,,Истина);
	
	ЕстьОшибка = Ложь;
	ЧтениеТекста = Новый ЧтениеТекста(файлПереименований.ПолноеИмя);
	
	Стр = ЧтениеТекста.ПрочитатьСтроку();
	Пока Стр <> Неопределено Цикл // строки читаются до символа перевода строки
		ИндексПоиска = Найти(Стр, "-->");
		Если СтрДлина(Стр)>0 И ИндексПоиска > 0 Тогда 
			
			ПутьФайлНовый = Сред(Стр, 0, ИндексПоиска-1);
			ПолныйПутьНовыйФайл = ПутьКВременномуКаталогуПереименований + "\"+ПутьФайлНовый;
			ПутьФайлСтарый = Сред(Стр, ИндексПоиска+3);
			ПолныйПутьСтарыйФайл = файлВыгрузкиКаталог.ПолноеИмя+"\"+ПутьФайлСтарый;
						
			КопироватьФайл(ПолныйПутьСтарыйФайл, ПолныйПутьНовыйФайл);
			
		ИначеЕсли СтрДлина(Стр)>0 Тогда
			ЕстьОшибка = Истина;
			Прервать;
			
		КонецЕсли;
		
		Стр = ЧтениеТекста.ПрочитатьСтроку();
	КонецЦикла;
	
	Если ЕстьОшибка Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЛинейныйКаталогВыгрузкиВсехМодулей83 = ПутьКВременномуКаталогуПереименований;
	
	Возврат Истина;
	
КонецФункции

//////////////////////////////////////////////////////////
// ВЫГРУЗКА/ЗАГРУЗКА КОНФИГУРАЦИИ

Процедура ОбработатьПараметрыЗапуска(ПараметрЗапуска, СтруктураПараметров = Неопределено) Экспорт

	Если ПустаяСтрока(ПараметрЗапуска) Тогда
		ВывестиОтладочноеСообщение("Отсутствуют параметры запуска");		
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДанные = Ложь;
	ЗагрузитьДанные = Ложь;
	СинхронизироватьХранилищеВГит = Ложь;
	мАвтозапуск = Ложь;
	ПутьКФайлуЛогов = "";
	
	Если Не ЗначениеЗаполнено(СтруктураПараметров) Тогда
		СтруктураПараметров = Новый Структура;//("КаталогВыгрузки", КаталогВыгрузки);
	КонецЕсли; 
	
	// Параметр может состоять из частей, разделенных символом ";".
	// Первая часть - главное значение параметра запуска. 
	// Наличие дополнительных частей определяется логикой обработки главного параметра.
	
	МассивПараметрыЗапуска = РазложитьСтрокуВМассивПодстрок(ПараметрЗапуска,";");
	Для Номер = 0 По МассивПараметрыЗапуска.Количество()-1 Цикл
		ЭлементМассива = МассивПараметрыЗапуска.Получить(Номер);
		Если ВРег(ЭлементМассива) = ВРег("path83") И Номер+1<=МассивПараметрыЗапуска.Количество()-1 Тогда
			Путь = МассивПараметрыЗапуска.Получить(Номер+1);
			Файл = Новый Файл(Путь);
			Если НЕ Файл.Существует() ИЛИ НЕ Файл.ЭтоФайл() Тогда
				ПутьКПлатформе1с = ПолучитьПутьПлатформы1С_83();
			Иначе
				ПутьКПлатформе1с = Путь;
			КонецЕсли;
		ИначеЕсли ВРег(ЭлементМассива) = ВРег("patchToCF") И Номер+1<=МассивПараметрыЗапуска.Количество()-1 Тогда
			Путь = МассивПараметрыЗапуска.Получить(Номер+1);
			Файл = Новый Файл(Путь);
			Если НЕ Файл.Существует() ИЛИ НЕ Файл.ЭтоФайл() Тогда
				ПутьКФайлуКонфигурации = "";
			Иначе
				ПутьКФайлуКонфигурации = Путь;
			КонецЕсли;
			СтруктураПараметров.Вставить("ПутьКФайлуКонфигурации", ПутьКФайлуКонфигурации);
			
		ИначеЕсли ВРег(ЭлементМассива) = ВРег("patchOut") И Номер+1<=МассивПараметрыЗапуска.Количество()-1 Тогда
			
			Путь = МассивПараметрыЗапуска.Получить(Номер+1);
			Файл = Новый Файл(Путь);
			Если НЕ Файл.Существует() ИЛИ НЕ Файл.ЭтоКаталог() Тогда
				Попытка
					СоздатьКаталог(Путь);
					КаталогВыгрузки = Путь; //ПутьККаталогуДляВыгрузки
				Исключение
					КаталогВыгрузки = ""; //ПутьККаталогуДляВыгрузки
				КонецПопытки;
			Иначе
				КаталогВыгрузки = Путь; //ПутьККаталогуДляВыгрузки
			КонецЕсли;
			СтруктураПараметров.Вставить("КаталогВыгрузки", КаталогВыгрузки);
			
		ИначеЕсли ВРег(ЭлементМассива) = ВРег("patchRepo") И Номер+1<=МассивПараметрыЗапуска.Количество()-1 Тогда
			
			Путь = МассивПараметрыЗапуска.Получить(Номер+1);
			Файл = Новый Файл(Путь);
			Если НЕ Файл.Существует() Тогда
				ПутьКХранилищу1C = ""; //ПутьККаталогуДляВыгрузки
			Иначе
				ПутьКХранилищу1C = Файл.ПолноеИмя; //ПутьККаталогуДляВыгрузки
			КонецЕсли;
			СтруктураПараметров.Вставить("ПутьКХранилищу1C", ПутьКХранилищу1C);
			СтруктураПараметров.Вставить("ПутьКФайлуХранилища1С", ПутьКХранилищу1C);
		ИначеЕсли ВРег(ЭлементМассива) = ВРег("maxVersions") И Номер+1<=МассивПараметрыЗапуска.Количество()-1 Тогда
			МаксимальнаяВерсияРазбора = МассивПараметрыЗапуска.Получить(Номер+1);
		КонецЕсли;
		
		Если ВРег(ЭлементМассива) = ВРег("auto") Тогда
			мАвтозапуск = Истина;
		КонецЕсли;
		
		Если ВРег(ЭлементМассива) = ВРег("decompile") Тогда
			ВыгрузитьДанные = Истина;
		КонецЕсли;
		
		Если ВРег(ЭлементМассива) = ВРег("compile") Тогда
			ЗагрузитьДанные = Истина;
		КонецЕсли;
		
		Если ВРег(ЭлементМассива) = ВРег("sync1ctogit") Тогда
			СинхронизироватьХранилищеВГит = Истина;
		КонецЕсли;
		
		Если ВРег(ЭлементМассива) = ВРег("out") Тогда
			
			Путь = УбратьОбрамляющиеКавычкиЕслиЕсть(МассивПараметрыЗапуска.Получить(Номер+1));
			ПутьКФайлуЛогов = Путь;
			
		КонецЕсли;
		
		
	КонецЦикла;
	
	//#Если ТолстыйКлиентОбычноеПриложение Тогда
	//	ЗаписатьОшибкуВЛог(ПутьКФайлуЛогов, 1);
	//#КонецЕсли
	
	Если ВыгрузитьДанные Тогда
		
		//лКаталогВыгрузки = "";
		лИмяКаталогаБазы = "";
		успешно = РазложитьКонфигурацию1СПоПапкамСогласноИерархииМетаданных("", "", ПутьКФайлуКонфигурации, КаталогВыгрузки); //СтруктураПараметров.КаталогВыгрузкиВсехМодулей83, СтруктураПараметров.КаталогВыгрузки);
		СтруктураПараметров.Вставить("ПутьКGit", КаталогВыгрузки); //СтруктураПараметров.КаталогВыгрузки);
		
		Проверить(успешно, "РазложитьКонфигурацию1СПоПапкамСогласноИерархииМетаданных");
		//Проверить(РазложитьКонфигурацию1СПоПапкамСогласноИерархииМетаданных(СтруктураПараметров), "РазложитьКонфигурацию1СПоПапкамСогласноИерархииМетаданных");
		
	ИначеЕсли ЗагрузитьДанные = Истина Тогда
		
		Если СтруктураПараметров.Свойство("КаталогВыгрузки") Тогда
			СтруктураПараметров.Вставить("КаталогЗагрузки", СтруктураПараметров.КаталогВыгрузки);
		КонецЕсли;
		
		//Проверить(СобратьКонфигурацию1СПоПапкамСогласноИерархииМетаданных(СтруктураПараметров), "СобратьКонфигурацию1СПоПапкамСогласноИерархииМетаданных");	
		
	ИначеЕсли СинхронизироватьХранилищеВГит = Истина Тогда
		
		СтруктураПараметров.Вставить("МаксимальнаяВерсия", МаксимальнаяВерсияРазбора);
		//Проверить(СинхронизироватьХранилищеКонфигурацийСГит(СтруктураПараметров), "СинхронизироватьХранилищеКонфигурацийСГит");
		
	КонецЕсли;
	
	
КонецПроцедуры

Процедура РазобратьФайлКонфигурации(парамПутьКФайлуКонфигурации, парамПутьККаталогуДляВыгрузки, СтруктураПараметров = Неопределено) Экспорт 
	Строка = "patchToCF;"+парамПутьКФайлуКонфигурации+";patchOut;"+парамПутьККаталогуДляВыгрузки+";decompile;";	
	ОбработатьПараметрыЗапуска(Строка, СтруктураПараметров);
КонецПроцедуры

Процедура СобратьФайлКонфигурации(парамПутьКФайлуКонфигурации, парамПутьККаталогуДляВыгрузки, СтруктураПараметров = Неопределено) Экспорт 
	Строка = "patchToCF;"+парамПутьКФайлуКонфигурации+";patchOut;"+парамПутьККаталогуДляВыгрузки+";compile;";	
	ОбработатьПараметрыЗапуска(Строка, СтруктураПараметров);
КонецПроцедуры

//////////////////////////////////////////////////////////
// РАЗБОРКА И СБОРКА КОНФИГУРАЦИИ

Функция РазложитьКонфигурацию1СПоПапкамСогласноИерархииМетаданных(Пользователь, Пароль, ПутьКФайлуКонфигурации, КаталогВыгрузки )
	
	ИмяКаталогаБазы = ПолучитьПутьКНовойБазе1С();
	
	Если НЕ СоздатьПустуюБазуПоКонфигурации(ПутьКФайлуКонфигурации, ИмяКаталогаБазы) Тогда
		ВывестиСообщение("Не удалось выполнить создание пустой базы по cf");
		Возврат Ложь;
	КонецЕсли; 
		
	КаталогВыгрузкиВсехМодулей = "";
	Если НЕ ВыгрузитьМодули(ИмяКаталогаБазы, Пользователь, Пароль, КаталогВыгрузкиВсехМодулей) Тогда
		ВывестиСообщение("Не удалось выгрузить модули");
		Возврат Ложь;
	КонецЕсли; 
	
	РаспаковатьМодулиНеуправляемыхФорм(КаталогВыгрузкиВсехМодулей);
	
	Если НЕ РазложитьМодули1СПоПапкамСогласноИерархииМетаданных(КаталогВыгрузкиВсехМодулей, КаталогВыгрузки) Тогда
		ВывестиСообщение("Не удалось выполнить копирование файлов");
		Возврат Ложь;
	КонецЕсли; 
	
	ВыполнитьВыгрузкуМетаданные81(ИмяКаталогаБазы, КаталогВыгрузки + "MD.xml");

	
	УдалитьВременныеФайлыВПопытке(ИмяКаталогаБазы);
	УдалитьВременныеФайлыВПопытке(КаталогВыгрузкиВсехМодулей);
	
	Возврат Истина;
КонецФункции

Функция СобратьКонфигурацию1СПоПапкамСогласноИерархииМетаданных(ПутьКФайлуКонфигурации, КаталогВыгрузки )
	
	ИмяКаталогаБазы = ПолучитьПутьКНовойБазе1С();
	
	Если НЕ СоздатьПустуюБазуБезКонфигурации(ИмяКаталогаБазы) Тогда
		ВывестиСообщение("Не удалось выполнить создание пустой базы по cf");
		Возврат Ложь;
	КонецЕсли;
	
	ЛинейныйКаталогВыгрузкиВсехМодулей83 = "";
	
	Если НЕ СобратьМодули1СИзИерарархииМетаданныхВЛинейнуюСтруктуру(ЛинейныйКаталогВыгрузкиВсехМодулей83, КаталогВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УпаковатьМодулиНеуправляемыхФорм(ЛинейныйКаталогВыгрузкиВсехМодулей83);
	
	Если НЕ ЗагрузитьМодули(ИмяКаталогаБазы, ЛинейныйКаталогВыгрузкиВсехМодулей83) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ СохранитьКонфигурациюИзБазы(ИмяКаталогаБазы, ПутьКФайлуКонфигурации) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УдалитьВременныеФайлыВПопытке(ИмяКаталогаБазы);
	УдалитьВременныеФайлыВПопытке(ЛинейныйКаталогВыгрузкиВсехМодулей83);
	
	Возврат Истина;
КонецФункции

//////////////////////////////////////////////////////////
// ВЫГРУЗКА/ЗАГРУЗКА МОДУЛЕЙ

Функция ВыгрузитьМодули(ИмяКаталогаБазы, Пользователь, Пароль, резКаталогВыгрузкиВсехМодулей83) //Экспорт
	резКаталогВыгрузкиВсехМодулей83 = "";
	
	Если НЕ ПроверитьСуществованиеФайлаКаталога(ПутьКПлатформе1с, "путь к платформе 1С") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПроверитьСуществованиеФайлаКаталога(ИмяКаталогаБазы, "каталог новой базы") Тогда //СтруктураПараметров.ИмяФайлаВыгрузкиКонфигурации
		Возврат Ложь;
	КонецЕсли;
	
	ПутьКаталогаВыгрузкиДанных = ПолучитьВременноеИмяКаталога(); //СтрЗаменить(ПолучитьИмяВременногоФайла("сtr"), ".сtr", "");
	
	файлВыгрузкиКаталог = Новый Файл(ПутьКаталогаВыгрузкиДанных);
	Если НЕ файлВыгрузкиКаталог.Существует() Тогда
		СоздатьКаталог(ПутьКаталогаВыгрузкиДанных);
		
		Проверить(файлВыгрузкиКаталог.Существует(), "Не существует каталог <"+ПутьКаталогаВыгрузкиДанных+">. Выполнение остановлено!");
	КонецЕсли;
	
	
	МассивФайлов = НайтиФайлы(ПутьКаталогаВыгрузкиДанных, "*.*");
	Проверить(МассивФайлов.Количество() = 0, "в каталоге <"+ПутьКаталогаВыгрузкиДанных+"> не должно быть файлов");
	
	
	строкаПутьКБазе = ПолучитьПодстрокуКомандыЗапуска1С_БазаДанных(ИмяКаталогаБазы); //СтруктураПараметров.ПутьКБазе);
	
	СтрокаЛогина = "";//ПолучитьСтрокуЛогинаКомандыЗапуска1С(Пользователь, Пароль);
	АппЛог = ПолучитьВременноеИмяФайлаЛога();
	
	//для 1С 8.2 строка
	КомандаВыгрузкиМодулей = " /DumpConfigFiles """ + ПутьКаталогаВыгрузкиДанных + """ -Module -Template -AllWritable -Picture";
	
	Если Режим83 = 1 Тогда
	   КомандаВыгрузкиМодулей = " /DumpConfigToFiles """ + ПутьКаталогаВыгрузкиДанных + """";
    КонецЕсли;
	
	
	Команда = """"+ПутьКПлатформе1с+"""" //ПутьК1С83
	+ " DESIGNER " + строкаПутьКБазе + " "
	+ СтрокаЛогина
	+ " /Visible"
	+ КомандаВыгрузкиМодулей
	
	//для 1С 8.2 строка		+ " /DumpConfigFiles""" + ПутьКаталогаВыгрузкиДанных + """ -Module -Template -AllWritable -Right -Picture"
	+ " /Out"""+АппЛог+"""";
	
	#Если Клиент Тогда
		Состояние("Выполняется выгрузка модулей конфигурации ...");
	#КонецЕсли 
	
	СписокФайлов = НайтиФайлы(ПутьКаталогаВыгрузкиДанных, "*.*");
	
	ЗапуститьСкрытоеПриложениеИДождатьсяЗавершения(Команда);
	
	резКаталогВыгрузкиВсехМодулей83 = ПутьКаталогаВыгрузкиДанных; 
	
	МассивФайлов = НайтиФайлы(ПутьКаталогаВыгрузкиДанных,"*.*");
	Проверить(МассивФайлов.Количество() > 0, "в каталоге <"+ПутьКаталогаВыгрузкиДанных+"> должны быть файлы");
	
	
	БылаОшибка = ПроверитьФайлПротокола(АппЛог, "Выгрузить модули");
	Если БылаОшибка Тогда
		Возврат Ложь;
	Иначе
		УдалитьВременныеФайлыВПопытке(АппЛог);
	КонецЕсли;
	
	Возврат Истина;	
	
КонецФункции

Функция ЗагрузитьМодули(ИмяКаталогаБазы, ПутьККаталогуВсехМодулей) 
	
	файлВыгрузкиКаталог = Новый Файл(ПутьККаталогуВсехМодулей);
	Проверить(файлВыгрузкиКаталог.Существует(), "Не существует каталог <"+ПутьККаталогуВсехМодулей+">. Выполнение остановлено!");
	
	МассивФайлов = НайтиФайлы(ПутьККаталогуВсехМодулей, "*.*");
	Проверить(МассивФайлов.Количество() > 0, "в каталоге <"+ПутьККаталогуВсехМодулей+"> не должно быть файлов");
	
	
	строкаПутьКБазе = ПолучитьПодстрокуКомандыЗапуска1С_БазаДанных(ИмяКаталогаБазы); //СтруктураПараметров.ПутьКБазе);
	
	строкаЛогина = "";///ПолучитьПодстрокуКомандыЗапуска1С_ЛогинПароль(); //СтруктураПараметров.Пользователь, СтруктураПараметров.Пароль);
	
	АппЛог = ПолучитьВременноеИмяФайлаЛога();
	
	Команда = """"+ПутьКПлатформе1с+""""
	+ " DESIGNER " + строкаПутьКБазе
	+ СтрокаЛогина
	+ " /Visible"
	+ " /LoadConfigFromFiles""" + ПутьККаталогуВсехМодулей + """"
	+ " /Out"""+АппЛог+"""";
	
	
	ВывестиОтладочноеСообщение("ЗагрузитьМодули: команда "+ Команда);
	ЗапуститьСкрытоеПриложениеИДождатьсяЗавершения(Команда);
	
	БылаОшибка = ПроверитьФайлПротокола(АппЛог, "ЗагрузитьМодули" );
	
	Если БылаОшибка Тогда
		Возврат Ложь;
	Иначе
		УдалитьВременныеФайлыВПопытке(АппЛог);
	КонецЕсли;
	
	Возврат Истина; //естьСтрокаВФайлеТрассировки;	
	
КонецФункции

//////////////////////////////////////////////////////////
// РАСПАКОВКА/УПАКОВКА МОДУЛЕЙ НЕУПРАВЛЯЕМЫХ ФОРМ

Процедура РаспаковатьМодулиНеуправляемыхФорм(КаталогВыгрузкиВсехМодулей)
	
	Если Не Режим83 = 1 Тогда
		Возврат;
	КонецЕсли;
	
	МассивФайловFormПослеРаспаковки = НайтиФайлы(КаталогВыгрузкиВсехМодулей, "*.Form");
	
	Если МассивФайловFormПослеРаспаковки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ЭлементФорма Из МассивФайловFormПослеРаспаковки Цикл
				
		ИмяКаталогаРаспаковки = ПолучитьВременноеИмяКаталога();
		
		Распаковка(ЭлементФорма.ПолноеИмя, ИмяКаталогаРаспаковки);
		
		МассивФайловПослеРаспаковки = НайтиФайлы(ИмяКаталогаРаспаковки, "*.*");
		
		Если МассивФайловПослеРаспаковки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого ЭлементМассива Из МассивФайловПослеРаспаковки Цикл
			
			НовоеИмя = "";
			
			Если ЭлементМассива.Имя = "module" Тогда
				НовоеИмя = "МодульФормы" 
			ИначеЕсли ЭлементМассива.Имя = "form" Тогда
				НовоеИмя = "РаспакованнаяФорма"
			Иначе
				ВызватьИсключение "Пипец попали";
			КонецЕслИ;
			
			ИмяНовогоФайлаКПеремещению = КаталогВыгрузкиВсехМодулей + "\"+ ЭлементФорма.ИмяБезРасширения + ".und."+ НовоеИмя + ".txt";
			
			КопироватьФайл(ЭлементМассива.ПолноеИмя, ИмяНовогоФайлаКПеремещению);
			
			
		КонецЦикла;
		
		// Удаляем распакованный каталог
		УдалитьФайлы(ИмяКаталогаРаспаковки);
		// Удаляем изначальный файл
		УдалитьФайлы(ЭлементФорма.ПолноеИмя);
			
	КонецЦикла;

	

КонецПроцедуры

Процедура УпаковатьМодулиНеуправляемыхФорм(КаталогВыгрузкиВсехМодулей)
	
	Если Не Режим83 = 1 Тогда
		Возврат;
	КонецЕсли;
	
	МассивФайловДляУпаковки = НайтиФайлы(КаталогВыгрузкиВсехМодулей, "*.und.*");
	
	Если МассивФайловДляУпаковки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяВременногоКаталогаДляСборки = ПолучитьВременноеИмяКаталога();
	
	СоответствиеПапокДляСборки = Новый Соответствие;

	Для каждого ЭлементМассива Из МассивФайловДляУпаковки Цикл
		
		ИмяФормыДляСборки = Лев(ЭлементМассива.ИмяБезРасширения, Найти(ЭлементМассива.ИмяБезРасширения, ".und.")-1);
		ИмяКаталогаСборки = ИмяВременногоКаталогаДляСборки+ "\" + ИмяФормыДляСборки;
		
		КаталогСборки = Новый Файл(ИмяКаталогаСборки);
		
		Если Не КаталогСборки.Существует() Тогда
			СоздатьКаталог(ИмяКаталогаСборки);
		КонецЕсли;
		
		СоответствиеПапокДляСборки.Вставить(ИмяФормыДляСборки,ИмяКаталогаСборки); 
		
		Если Найти(ЭлементМассива.Имя,"МодульФормы.txt") > 0 Тогда
			НовоеИмя = "module" 
		ИначеЕсли Найти(ЭлементМассива.Имя,"РаспакованнаяФорма.txt") > 0 Тогда
			НовоеИмя = "form"
		Иначе
			ВызватьИсключение "Пипец попали";
		КонецЕслИ;
		
		ИмяНовогоФайлаКПеремещению = ИмяКаталогаСборки + "\"+  НовоеИмя;
		
		КопироватьФайл(ЭлементМассива.ПолноеИмя, ИмяНовогоФайлаКПеремещению);
		
		// Удаляем изначальный файл
		УдалитьФайлы(ЭлементМассива.ПолноеИмя);

	КонецЦикла;	
		
	
	Для каждого ФайлПапка Из СоответствиеПапокДляСборки Цикл
		
		ИмяНовогоФайла = КаталогВыгрузкиВсехМодулей + "\"+ ФайлПапка.Ключ + ".Form";
		ПапкаДляСборки = ФайлПапка.Значение;
		
		Упаковка(ИмяНовогоФайла, ПапкаДляСборки);
		
		
	КонецЦикла;
	
	// Удаляем распакованный каталог
	УдалитьФайлы(ИмяВременногоКаталогаДляСборки);
		
	
КонецПроцедуры



////////////////////////////////////////////////////////
// РАБОТА С GIT

//TODO сделать тест Чисто git комманды. 
Функция ВыполнитьКоммитГит(КаталогРепозиторияГит, Комментарий, Автор, Дата=Неопределено) Экспорт 
 	
	ФайлРепозиторияГит = Новый Файл(КаталогРепозиторияГит+".git");
	Если Не ФайлРепозиторияГит.Существует() Тогда
		ВывестиСообщение("Не найден репозитарий git. Нет подкаталога .git в каталоге <"+КаталогРепозиторияГит+"> ");
		Возврат Ложь;
	КонецЕсли;
	
	Если Дата = Неопределено ИЛИ ТипЗнч(Дата) <> Тип("Дата") Тогда
		Дата = ТекущаяДата();
	КонецЕсли;

	ИмяФайлаКомментария = ПолучитьИмяВременногоФайла("txt");
	файлКомментария = Новый ТекстовыйДокумент;
	файлКомментария.УстановитьТекст(Комментарий);
	файлКомментария.Записать(ИмяФайлаКомментария, КодировкаТекста.UTF8);
			//файлКомментария.Записать(ИмяФайлаКомментария, "windows-1251");
	ФайлДляВыполнения = Новый ТекстовыйДокумент;
	ФайлДляВыполнения.ДобавитьСтроку("cd /d """ + КаталогРепозиторияГит+"""");
	ФайлДляВыполнения.ДобавитьСтроку("set GIT_AUTHOR_DATE="""+Формат(Дата, "Л=en_US_POSIX; ДФ='yyyy-MM-dd hh:mm:ss'; ДЛФ=DDT")+"""");
	ФайлДляВыполнения.ДобавитьСтроку("git add .");
			//СтрокаДляЗаписи = "git commit -a --file="""+ИмяФайлаКомментария+""" --author="""+Автор+" <"+Автор+"@localhost"+"> """
	СтрокаДляЗаписи = "git commit -a --file="""+ИмяФайлаКомментария+""" --author="""+Автор+"""";
	ФайлДляВыполнения.ДобавитьСтроку(СтрокаДляЗаписи);
			//ФайлДляВыполнения.ДобавитьСтроку("git tag -a "+СтруктураПараметров.Тэг +" -m "+СтруктураПараметров.Тэг);
	ИмяФайлаВыполнения = ПолучитьИмяВременногоФайла("bat");
	ФайлДляВыполнения.Записать(ИмяФайлаВыполнения, "cp866");
	
	ВывестиОтладочноеСообщение("ВыполнитьКоммитГит: команда "+ ИмяФайлаВыполнения);
	
	ВывестиОтладочноеСообщение("ВыполнитьКоммитГит: текст файла запуска "+Символы.ВК+ ФайлДляВыполнения.ПолучитьТекст());
	
	рез = ЗапуститьСкрытоеПриложениеИДождатьсяЗавершения(ИмяФайлаВыполнения); //,,Истина,,Истина);

	УдалитьВременныеФайлыВПопытке(ИмяФайлаВыполнения);
	УдалитьВременныеФайлыВПопытке(ИмяФайлаКомментария);
	Возврат Истина;
КонецФункции





///////////////////////////////////////
// РАБОТА С БАЗОЙ

Процедура ПолучитьКонфигурациюИзТекущейБазы()
	
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	
	Проверить(СохранитьКонфигурациюИзБазы(СтрокаСоединения, Неопределено), "ПолучитьКонфигурациюИзТекущейБазы")
	
КонецПроцедуры

Функция СохранитьКонфигурациюИзБазы(ИмяКаталогаБазы, ПутьКФайлуВыгрузкиКонфигурации) //Экспорт
	Перем ИмяФайлаВыгрузкиКаталог, строкаПутьКБазе;
	
	ВывестиОтладочноеСообщение("Начало выгрузки конфигурации базы "+ТекущаяДата());
	
	//Если ПроверитьСуществованиеФайлаКаталога(ПутьКФайлуВыгрузкиКонфигурации, "конфигурация для создания новой базы") Тогда //СтруктураПараметров.ИмяФайлаВыгрузкиКонфигурации
	//	Попытка
	//		УдалитьФайлы(ПутьКФайлуВыгрузкиКонфигурации);
	//	Исключение
	//	КонецПопытки;
	//Иначе
	//	ПутьКФайлуВыгрузкиКонфигурации = ПолучитьИмяВременногоФайла("cf");
	//КонецЕсли;
	
	БылаОшибка = Ложь;
	
	
	//Если Не ПроверитьСуществованиеФайлаКаталога(ИмяКаталогаБазы, "путь к новой базе <"+ИмяКаталогаБазы+">") Тогда
	//	Возврат Ложь;
	//КонецЕсли; 
	
	АппЛог = ПолучитьВременноеИмяФайлаЛога();
	Команда = """"+ПутьКПлатформе1с+"""" 
	+ " DESIGNER "+ПолучитьПодстрокуКомандыЗапуска1С_БазаДанных(ИмяКаталогаБазы)
	+ " /DumpCfg"""+ПутьКФайлуВыгрузкиКонфигурации+""""
	+ " /Out"""+АппЛог+"""";
	
	ВывестиОтладочноеСообщение(Команда);
	ЗапуститьСкрытоеПриложениеИДождатьсяЗавершения(Команда);
	
	СтрокаПроверкиОшибки = "Сохранение конфигурации успешно завершено";
	
	ФайлЛог = Новый Файл(АппЛог);
	
	СписокСтрок = Новый Массив;
	СписокСтрок.Добавить(СтрокаПроверкиОшибки);	
	БылаОшибка = ПроверитьФайлПротоколаПоСтрокам(АппЛог, СписокСтрок);
	Если Не БылаОшибка Тогда
		УдалитьВременныеФайлыВПопытке(АппЛог);
	КонецЕсли;
	
	ПутьКФайлуКонфигурации = ПутьКФайлуВыгрузкиКонфигурации;
	
	ВывестиОтладочноеСообщение("Завершение: выгрузка конфигурации "+ТекущаяДата());
	Возврат НЕ БылаОшибка;
	
КонецФункции

Функция СоздатьПустуюБазуПоКонфигурации(ПутьКФайлуКонфигурации, ИмяКаталогаБазы)
	
	ВывестиОтладочноеСообщение("Начало создать базу "+ТекущаяДата());
	
	Если Не ПроверитьСуществованиеФайлаКаталога(ИмяКаталогаБазы, "путь к новой базе <"+ИмяКаталогаБазы+">") Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	
	АппЛог = ПолучитьВременноеИмяФайлаЛога();
	//выполняем
	Команда = """"+ПутьКПлатформе1с+""""
	+ " CREATEINFOBASE  File=""" + ИмяКаталогаБазы+""""
		+ " /Out """+АппЛог+"""";
	
	ОптимизацияСоздания = Не ПустаяСтрока(ПутьКФайлуКонфигурации); //Истина;
	
	Если Не ПустаяСтрока(ПутьКФайлуКонфигурации) Тогда
		
		Команда = Команда + " /UseTemplate """ + ПутьКФайлуКонфигурации + """";
		
	КонецЕсли;
		
	ЗапуститьСкрытоеПриложениеИДождатьсяЗавершения(Команда);
	 	
		
	СтрокаПроверкиОшибки = "успешно завершено";
		
	ФайлЛог = Новый Файл(АппЛог);
	
	СписокСтрок = Новый Массив;
	СписокСтрок.Добавить(СтрокаПроверкиОшибки);	
	БылаОшибка = ПроверитьФайлПротоколаПоСтрокам(АппЛог, СписокСтрок);
	Если Не БылаОшибка Тогда
		УдалитьВременныеФайлыВПопытке(АппЛог);
	КонецЕсли;
	
	ВывестиОтладочноеСообщение("Завершение: создать базу "+ТекущаяДата());
	
	Возврат НЕ БылаОшибка;

		
КонецФункции

Функция СоздатьПустуюБазуБезКонфигурации(ИмяКаталогаБазы) //Экспорт
		
	ВывестиОтладочноеСообщение("Начало создать базу "+ТекущаяДата());
	
	Если НЕ ПроверитьСуществованиеФайлаКаталога(ПутьКПлатформе1с, "путь к платформе 1С 8.3") Тогда
		Возврат Ложь;
	КонецЕсли;
	
		Если Не ПроверитьСуществованиеФайлаКаталога(ИмяКаталогаБазы, "путь к новой базе <"+ИмяКаталогаБазы+">") Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	АппЛог = ПолучитьВременноеИмяФайлаЛога();
		
	СоздатьКаталог(ИмяКаталогаБазы);
	Команда = """"+ПутьКПлатформе1с+""""
	+ " CREATEINFOBASE  File=""" + ИмяКаталогаБазы+""""
	+ " /Out """+АппЛог+"""";
	
	ЗапуститьСкрытоеПриложениеИДождатьсяЗавершения(Команда);
	
	УдалитьВременныеФайлыВПопытке(АппЛог);
		
	ВывестиОтладочноеСообщение("Завершение: создать базу "+ТекущаяДата());
	Возврат Истина;
	
КонецФункции

Функция ПолучитьПутьКНовойБазе1С(папкаДляСозданияБазыПоУмолчанию = "")
	Если НЕ ЗначениеЗаполнено(папкаДляСозданияБазыПоУмолчанию) Тогда
		лИмяКаталога = ПолучитьВременноеИмяКаталога(); 
	Иначе
		лИмяКаталога = папкаДляСозданияБазыПоУмолчанию;
	КонецЕсли;
	
	лКаталог = Новый Файл(лИмяКаталога);
	Если лКаталог.Существует() Тогда
		Попытка
			УдалитьФайлы(лИмяКаталога);
		Исключение
			ошибка = ОписаниеОшибки();
			ВызватьИсключение "Не удалось удалить папку для новой тестовой базы"; 
		КонецПопытки; 
	КонецЕсли; 
	
	СоздатьКаталог(лИмяКаталога);
	Проверить(лКаталог.Существует(), "Не удалось создать папку для новой тестовой базы");
	Возврат лИмяКаталога;
КонецФункции

Функция ПолучитьПодстрокуКомандыЗапуска1С_БазаДанных(парамПутьКБазе)
	
	Если ОпределитьЭтаИнформационнаяБазаФайловаяПоСтрокеСоединения(парамПутьКБазе) Тогда
		
		ПутьКБД = Сред(парамПутьКБазе, 6, СтрДлина(парамПутьКБазе) - 6);
		лПутьКБазе = " /F " + ПутьКБД + "";
		
	ИначеЕсли Найти(НРег(парамПутьКБазе),"srvr") > 0 Тогда
		
		лИмяКластераСерверов = НСтр(парамПутьКБазе, "Srvr");
		лИмяБазы = НСтр(парамПутьКБазе, "Ref");
		лПутьКБазе = " /S """ + лИмяКластераСерверов + "\" + лИмяБазы + """";
		
	Иначе
		
		лПутьКБазе = " /F """ + парамПутьКБазе + """";
		
	КонецЕсли;
	Возврат лПутьКБазе;
КонецФункции

Функция ПолучитьСтрокуПодключенияКБазе()
	
	// Получим строку соединения с базой
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	
	Если ВРег(Лев(СтрокаСоединения, 6)) = "FILE=""" Тогда
		// Файловая база
		ПутьКБазе = Сред(СтрокаСоединения, 7);
		Поз = Найти(ПутьКБазе, """");
		ПутьКБазе = Лев(ПутьКБазе, Поз-1);
		
		Возврат "/F" + ДобавитьКавычки(ПутьКБазе);
	Иначе
		// Серверная база, строка соединения в формате Srvr="ServerName";Ref="BaseName";
		Стр = СтрЗаменить(СтрокаСоединения, """", Символы.ПС);
		ИмяСервера = СтрПолучитьСтроку(Стр, 2);
		ИмяБазы    = СтрПолучитьСтроку(Стр, 4);
		ПутьКБазе = ИмяСервера + "\" + ИмяБазы;
		
		Возврат "/S" + ДобавитьКавычки(ПутьКБазе);
	КонецЕсли;
	
КонецФункции

Функция ОпределитьЭтаИнформационнаяБазаФайловаяПоСтрокеСоединения(СтрокаСоединенияСБД = "") 
			
	СтрокаСоединенияСБД = ?(ПустаяСтрока(СтрокаСоединенияСБД), СтрокаСоединенияИнформационнойБазы(), СтрокаСоединенияСБД);
	
	// в зависимости от того файловый это вариант БД или нет немного по-разному путь в БД формируется
	ПозицияПоиска = Найти(Врег(СтрокаСоединенияСБД), "FILE=");
	
	Возврат ПозицияПоиска = 1;	
	
КонецФункции



/////////////////////////////////////////////
// РАБОТА СО СТРОКОЙ

// Функция ДополнитьСлешВПуть
//
// Параметры:
// ИмяКаталога
//
// Описание:
// Функция дополняет и возвращает слеш в путь в конец строки, если он отсутствует
//
Функция ДополнитьСлешВПуть(Знач Каталог)
	Если Прав(Каталог, 1) <> "\" Тогда
		Каталог = Каталог + "\";
	КонецЕсли;
	Возврат Каталог;
КонецФункции

Функция ДобавитьКавычки(Стр)
	
	Если Найти(Стр, " ") = 0 Тогда
		Возврат Стр;
	Иначе
		Возврат """" + Стр + """";
	КонецЕсли;
	
КонецФункции

Функция УбратьОбрамляющиеКавычкиЕслиЕсть(текст) Экспорт
	лЗначение = текст;
	Если Лев(лЗначение, 1) = """" Тогда
		лЗначение = Сред(лЗначение, 2);
	КонецЕсли;
	Если Прав(лЗначение, 1) = """" Тогда
		лЗначение = Сред(лЗначение, 1, СтрДлина(лЗначение)-1);
	КонецЕсли;
	Возврат лЗначение;
КонецФункции

// Функция разбивает строку разделителем.
//
// Подсистема "Инструменты разработчика"  Авторское право (с) 2007, Старых С.А.
// 
// Параметры:
//  пСтрока      - Строка - которую разбиваем;
//  *пРазделитель - Строка, "." - символ-разделитель;
//  *ОбрезатьНепечатныеСимволы - Булево, *Ложь - делать СокрЛП.
//  *ОставлятьПустуюСтроку - Булево, *Истина - если передана пустая строка, то добавлять ее в массив.
//
// Возвращаемое значение:
//  Массив - фрагментов.
//
Функция ПолучитьМассивИзСтрокиСРазделителем(Знач Стр, Разделитель = ".", ОбрезатьНепечатныеСимволы = Ложь, ОставлятьПустуюСтроку = Истина) Экспорт
	
	ВывестиСообщение("Процедура на удаление");
	
	МассивСтрок = Новый Массив;
	Если Истина
		И Не ОставлятьПустуюСтроку 
		И ПустаяСтрока(Стр)
		Тогда
		Возврат МассивСтрок;
	КонецЕсли; 
	
	
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				Фрагмент = Стр;
				Если ОбрезатьНепечатныеСимволы Тогда
					Фрагмент = СокрЛП(Фрагмент);
				КонецЕсли;
				МассивСтрок.Добавить(Фрагмент);
				Возврат МассивСтрок;
			КонецЕсли;
			Фрагмент = Лев(Стр,Поз-1);
			Если ОбрезатьНепечатныеСимволы Тогда
				Фрагмент = СокрЛП(Фрагмент);
			КонецЕсли;
			МассивСтрок.Добавить(Фрагмент);
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивСтрок;
	
КонецФункции // ПолучитьМассивИзСтрокиСРазделителем()

// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
// Общий модуль СтроковыеФункцииКлиентСервер.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     - если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//
//
// Возвращаемое значение:
//  Массив - массив строк.
//
// Примеры:
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",") - возвратит массив из 5 элементов, три из которых  - пустые строки;
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",", Истина) - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок(" один   два  ", " ") - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок("") - возвратит пустой массив;
//  РазложитьСтрокуВМассивПодстрок("",,Ложь) - возвратит массив с одним элементом "" (пустой строкой);
//  РазложитьСтрокуВМассивПодстрок("", " ") - возвратит массив с одним элементом "" (пустой строкой);
//
//&НаКлиенте
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 


////////////////////////////////////////
// РАБОТА С СООБЩЕНИЯМИ

Функция ФорматДСО(ДопСообщениеОшибки)
	Если ДопСообщениеОшибки = "" Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат Символы.ПС + ДопСообщениеОшибки;
КонецФункции

Процедура Проверить(_Истина, ДопСообщениеОшибки = "") //Экспорт
	СообщениеОшибки = "Переданный параметр ("+_Истина+") не является Истиной, а хотели, чтобы являлся." + ФорматДСО(ДопСообщениеОшибки);
	
	Если Не _Истина Тогда
		ВызватьИсключение(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

Процедура ВывестиСообщение(сообщение) Экспорт
	
	Сообщить(сообщение);
	
КонецПроцедуры

Процедура УстановитьСостояние(СтрокаСостояние) Экспорт
	
	#Если клиент Тогда
		Состояние(СтрокаСостояние);
	#КонецЕсли
	
КонецПроцедуры



// ОТЛАДКА 

Процедура ВывестиОтладочноеСообщение(сообщение) Экспорт
	Если Отладка Тогда
		Сообщить(Сообщение);
	КонецЕсли;	
КонецПроцедуры



/////////////////////////////////////
// РАБОТА С ПЛАТФОРМОЙ

Функция ПолучитьПутьПлатформы1С_83() Экспорт
	ПутьПлатформы1С_83 = ПравильныйПутьКПлатформеПоВерсииПлатформы("8.3");
	ФайлПлатформы = Новый Файл(ПутьПлатформы1С_83);
	Проверить(файлПлатформы.Существует(), "Не найден путь к платформе 1С 8.3 - не существует файл <"+путьПлатформы1С_83+">");
	Возврат путьПлатформы1С_83;
КонецФункции

Функция ПолучитьПутьПлатформы1С_82() Экспорт
	ПутьПлатформы1С_82 = ПравильныйПутьКПлатформеПоВерсииПлатформы("8.2");
	ФайлПлатформы = Новый Файл(ПутьПлатформы1С_82);
	Проверить(файлПлатформы.Существует(), "Не найден путь к платформе 1С 8.2 - не существует файл <"+путьПлатформы1С_82+">");
	Возврат путьПлатформы1С_82;
КонецФункции


//смотрим по файловой системе. Работает для 32- и 64-разрядных систем
Функция ПравильныйПутьКПлатформеПоВерсииПлатформы(версияПлатформы, парамОписаниеОшибки = "") Экспорт
	Если Лев(версияПлатформы, 2) <> "8." Тогда
		ВызватьИсключение "Неверная версия платформы <"+версияПлатформы+">";
	КонецЕсли;	
	
	путьProgramFiles = "C:\Program Files (x86)\";
	файлProgramFiles = Новый Файл(путьProgramFiles);
	Если Не файлProgramFiles.Существует() Тогда
		путьProgramFiles = "C:\Program Files\";
		файлProgramFiles = Новый Файл(путьProgramFiles);
		Проверить(файлProgramFiles.Существует(), "Должен существовать путь к Program Files или Program Files (86)");
	КонецЕсли;
	парамОписаниеОшибки = "";
	
	//строкаВерсии = Сред(версияПлатформы, 3);
	СписокСтрок = СтрЗаменить(версияПлатформы, ".", Символы.ВК);
	версия1 = СтрПолучитьСтроку(СписокСтрок, 1);
	версия2 = СтрПолучитьСтроку(СписокСтрок, 2);
	Если версия2 = "3" Тогда // 8.3
		путьКПлатформе = путьProgramFiles + "1cv8\";
	ИначеЕсли версия2 = "2" Тогда // 8.2
		путьКПлатформе = путьProgramFiles + "1cv82\";
		
	ИначеЕсли версия2 = "1" Тогда // 8.1
		путьКПлатформе = путьProgramFiles + "1cv81\";
	Иначе
		ВызватьИсключение "Неверная версия платформы <"+версияПлатформы+">";
	КонецЕсли;
	//версия3 = СтрПолучитьСтроку(СписокСтрок, 3);
	//версия4 = СтрПолучитьСтроку(СписокСтрок, 4);
	
	МассивФайлов = НайтиФайлы(путьКПлатформе, версияПлатформы+"*.*");
	Если МассивФайлов.Количество() = 0 Тогда
		парамОписаниеОшибки = "Не найден путь к платформе 1С <"+версияПлатформы+">";
		Возврат "";
	КонецЕсли;
	
	списокЗначений = Новый СписокЗначений;
	Для каждого ЭлементМассива Из МассивФайлов Цикл
		правыйСимвол = Прав(ЭлементМассива.Имя,1);
		Если правыйСимвол < "0" или правыйСимвол > "9" Тогда
			Продолжить;
		КонецЕсли;
		списокЗначений.Добавить(ЭлементМассива.Имя);
	КонецЦикла;
	списокЗначений.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	
	нужныйПуть = путьКПлатформе + списокЗначений[0].Значение + "\bin\1cv8.exe";
	Возврат нужныйПуть;
КонецФункции

// Проверяет протокол на наличие строки и возвращает "Истина" при наличии ошибок;
Функция ПроверитьФайлПротокола(ФайлСПротоколом,  ОтладочноеСообщение = "" ) Экспорт
	
	Файл = Новый Файл(ФайлСПротоколом);
	
	Если Файл.Существует() 
		И Файл.ЭтоФайл() Тогда
		Текст = Новый ТекстовыйДокумент;
		Попытка
			Текст.Прочитать(ФайлСПротоколом);
		Исключение
			ВывестиСообщение("При выводе файла возникла ошибка: "+ОписаниеОшибки());
			Возврат Истина;
		КонецПопытки;
		
		
		Если Текст.КоличествоСтрок() > 0 Тогда
			ВывестиОтладочноеСообщение("При проверке файла лога обнаружены ошибки. Доп.отладочная информация: " + ОтладочноеСообщение);
			
			ВывестиОтладочноеСообщение("+---/ "+ФайлСПротоколом+" /-------------------------------");
			Для Инд = 1 По Текст.КоличествоСтрок() Цикл
				ВывестиСообщение("|"+Текст.ПолучитьСтроку(Инд));
			КонецЦикла;
			ВывестиОтладочноеСообщение("+-------------");
			
			
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

//Функция возвращает истина если выведен_файл/не_найдена_фраза
Функция ПроверитьФайлПротоколаПоСтрокам(ИмяФайла, СписокСтрокПоиска) //Экспорт
	
	// проверим есть ли файл
	Файл = Новый Файл(ИмяФайла);
	Если Файл.Существует() Тогда
		ФайлОтчета = Новый ТекстовыйДокумент;
		Попытка
			ФайлОтчета.Прочитать(ИмяФайла);
		Исключение
			ВывестиСообщение("При выводе файла возникла ошибка: "+ОписаниеОшибки());
			Возврат Истина;
		КонецПопытки;
	
		// надо ли выводить при ошибке
		Если СписокСтрокПоиска <> Неопределено Тогда
			Для Инд = 1 По ФайлОтчета.КоличествоСтрок() Цикл
				СтрокаПроверки = ВРег(ФайлОтчета.ПолучитьСтроку(Инд));
				Для Каждого СтрПоиска Из СписокСтрокПоиска Цикл
					ВФразаПоиска = ВРег(СтрПоиска);
					Если СтрЧислоВхождений(СтрокаПроверки, ВФразаПоиска) <> 0 Тогда
						// не будем выводить
						Возврат Ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		// вывести если строки не нашлись
		ВывестиСообщение("+---/ "+ИмяФайла+" /-------------------------------");
		Для Инд = 1 По ФайлОтчета.КоличествоСтрок() Цикл
			ВывестиСообщение("|"+ФайлОтчета.ПолучитьСтроку(Инд));
		КонецЦикла;
		ВывестиСообщение("+-------------");
	КонецЕсли;
	
	Возврат Истина;
КонецФункции


WshShell = Новый COMОбъект("WScript.Shell");
ВнешнниеКомпонентыЗагружены = ложь;

СоответствиеПереименованияПапок = Новый Соответствие;
// СПРАВОЧНИКИ
СоответствиеПереименованияПапок.Вставить("Catalog","Справочники");
// ДОКУМЕНТЫ
СоответствиеПереименованияПапок.Вставить("DocumentNumerator","НумераторыДокументов");
СоответствиеПереименованияПапок.Вставить("DocumentJournal","ЖурналыДокументов");
СоответствиеПереименованияПапок.Вставить("Document","Документы");
// РЕГИСТРЫ
СоответствиеПереименованияПапок.Вставить("AccountingRegister","РегистрыБухгалтерии");
СоответствиеПереименованияПапок.Вставить("AccumulationRegister","РегистрыНакоплений");
СоответствиеПереименованияПапок.Вставить("CalculationRegister","РегистрыРасчета");
СоответствиеПереименованияПапок.Вставить("InformationRegister","РегистрыСведений");


СоответствиеПереименованияПапок.Вставить("ChartOfAccounts","ПланыСчетов");
СоответствиеПереименованияПапок.Вставить("ChartOfCalculationTypes","ПланыВидовРасчета");
СоответствиеПереименованияПапок.Вставить("ChartOfCharacteristicTypes","ПланыВидовХарактеристик");

СоответствиеПереименованияПапок.Вставить("CommonForm","ОбщиеФормы");
СоответствиеПереименованияПапок.Вставить("CommonModule","ОбщиеМодули");
СоответствиеПереименованияПапок.Вставить("CommonPicture","ОбщиеКартинки");
СоответствиеПереименованияПапок.Вставить("CommonTemplate","ОбщиеМакеты");

СоответствиеПереименованияПапок.Вставить("Configuration","ОписаниеКонфигурации");

СоответствиеПереименованияПапок.Вставить("Constant","Константы");
СоответствиеПереименованияПапок.Вставить("DataProcessor","Обработки");
СоответствиеПереименованияПапок.Вставить("Enum","Перечисления");


СоответствиеПереименованияПапок.Вставить("EventSubscription","ПодпискиНаСобытия");
СоответствиеПереименованияПапок.Вставить("ExchangePlan","ПланыОбмена");
СоответствиеПереименованияПапок.Вставить("FilterCriterion","КритерииОтбора");

СоответствиеПереименованияПапок.Вставить("FunctionalOption","ФункциональныеОпции");
СоответствиеПереименованияПапок.Вставить("FunctionalOptionsParameter","ПараметрыФункциональныхОпций");

СоответствиеПереименованияПапок.Вставить("Interface","Интерфейсы");
СоответствиеПереименованияПапок.Вставить("Language","Языки");

СоответствиеПереименованияПапок.Вставить("Report","Отчеты");
СоответствиеПереименованияПапок.Вставить("Role","Роли");

СоответствиеПереименованияПапок.Вставить("ScheduledJob","РегламентныеЗадания");

СоответствиеПереименованияПапок.Вставить("Sequence","Последовательности");

СоответствиеПереименованияПапок.Вставить("SessionParameter","ПараметрыСеанса");

СоответствиеПереименованияПапок.Вставить("Task","Задачи");
СоответствиеПереименованияПапок.Вставить("BusinessProcess","БизнесПроцессы");

СоответствиеПереименованияПапок.Вставить("Style","Стили");
СоответствиеПереименованияПапок.Вставить("StyleItem","ЭлементыСтиля");


СоответствиеПереименованияПапок.Вставить("Subsystem","Подсистемы");
СоответствиеПереименованияПапок.Вставить("WSReference","WSСсылки");




СтруктураДополнительногоПереименования = Новый Структура;

// ПО ОБЪЕКТУ
СтруктураДополнительногоПереименования.Вставить("ManagerModule","МодульМенеджера");
СтруктураДополнительногоПереименования.Вставить("ObjectModule","МодульОбъекта");
СтруктураДополнительногоПереименования.Вставить("ValueManagerModule","МодульМенеджераЗначений");

СтруктураДополнительногоПереименования.Вставить("form","Формы");

